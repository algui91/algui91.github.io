<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Switch on El Baúl del programador</title>
        <link>https://elbauldelprogramador.com/tags/switch/index.xml</link>
        <description>Recent content in Switch on El Baúl del programador</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>es-ES</language>
        <image>
            <url>https://elbauldelprogramador.com/img/bio-photo-rss.png</url>
            <link>https://elbauldelprogramador.com/tags/switch/index.xml</link>
            <title>Switch on El Baúl del programador</title>
            <width>144</width>
            <height>144</height>
        </image>
        <atom:link href="https://elbauldelprogramador.com/tags/switch/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Por qué un switch es más rápido que su homólogo if-then-else</title>
            <link>https://elbauldelprogramador.com/por-que-un-switch-es-mas-rapido-que-su-homologo-if-then-else/</link>
            <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
            
            <guid>https://elbauldelprogramador.com/por-que-un-switch-es-mas-rapido-que-su-homologo-if-then-else/</guid>
            <description>&lt;p&gt;En este artículo pretendo explicar el motivo por el cual un switch es mucho más rápido que su homólogo en secuencias if-then-else, para ello analizaremos la implementación del switch.&lt;/p&gt;

&lt;h2 id=&#34;introducción&#34;&gt;Introducción&lt;/h2&gt;

&lt;p&gt;El switch se basa en una implementación muy eficiente llamada en inglés &lt;strong&gt;jump table&lt;/strong&gt; o tabla de saltos. Esta tabla es un array, donde la entrada &lt;em&gt;i&lt;/em&gt; es la dirección de un segmento de código que implementa la acción que el switch debería ejecutar cuando la condición es igual a &lt;em&gt;i&lt;/em&gt;. El código realiza una referencia al array dentro de la tabla de saltos usando el índice del switch y determinar así el destino para una instrucción de salto (instrucción &lt;strong&gt;jmp&lt;/strong&gt; en &lt;a href=&#34;https://elbauldelprogramador.com/tags/asm&#34;&gt;ensamblador&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;!--ad--&gt;&lt;/p&gt;

&lt;p&gt;Esa es la clave que explica el mayor rendimiento de un switch frente a una larga secuencia de &lt;strong&gt;if-then-else&lt;/strong&gt;. Ya que el tiempo necesario para realizar el switch es independiente del número de casos (sentencia case:) que éste tiene.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://elbauldelprogramador.com/compilacion-de-programas-makefile-y-g/&#34;&gt;GCC&lt;/a&gt; selecciona qué metodo de traducción aplica al switch dependiendo del número de casos y valores. Las tablas de saltos se usan cuando hay un número determinado de casos (cuatro por ejemplo) y abarcan un número pequeño de valores. Por ejemplo:&lt;/p&gt;

&lt;h2 id=&#34;sentencia-switch&#34;&gt;Sentencia switch&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;switch_eg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
   &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

   &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
         &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
         &lt;span class=&#34;cm&#34;&gt;/*Fall through*/&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;103&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
         &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;104&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;106&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
         &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
         &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;traducción-a-extended-c&#34;&gt;Traducción a extended C&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;switch_eg_impl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;cm&#34;&gt;/*Tabla de punteros a código*/&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_def&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_def&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_D&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;

   &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loc_def&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

   &lt;span class=&#34;cm&#34;&gt;/*Rama multidireccional*/&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;

   &lt;span class=&#34;nl&#34;&gt;loc_def&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;   &lt;span class=&#34;cm&#34;&gt;/*Default case*/&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

   &lt;span class=&#34;nl&#34;&gt;loc_C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;     &lt;span class=&#34;cm&#34;&gt;/*Case 103*/&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

   &lt;span class=&#34;nl&#34;&gt;loc_A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;     &lt;span class=&#34;cm&#34;&gt;/*Case 100*/&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

   &lt;span class=&#34;nl&#34;&gt;loc_B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;     &lt;span class=&#34;cm&#34;&gt;/*Case 102*/&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;cm&#34;&gt;/*Fall through*/&lt;/span&gt;

   &lt;span class=&#34;nl&#34;&gt;rest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;      &lt;span class=&#34;cm&#34;&gt;/*Finalizar case 103*/&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

   &lt;span class=&#34;nl&#34;&gt;loc_D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;     &lt;span class=&#34;cm&#34;&gt;/*Case 104, 106*/&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;cm&#34;&gt;/*Fall through*/&lt;/span&gt;

   &lt;span class=&#34;nl&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;La traducción a extended C muestra la estructura de una tabla de saltos (&lt;strong&gt;jt&lt;/strong&gt;) y cómo se accede a ella.&lt;/p&gt;

&lt;p&gt;En este ejemplo, los cases del switch no son contiguos, no existen casos para los valores 101 y 105, y hay casos con varias etiquetas (104 y 106), también hay casos denominados &lt;em&gt;fall through&lt;/em&gt; (cases sin sentencia &lt;strong&gt;break&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;El código ensamblador generado es muy parecido a la versión extended C:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-nasm&#34; data-lang=&#34;nasm&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;.file&lt;/span&gt;   &lt;span class=&#34;s&#34;&gt;&amp;quot;sw.c&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;.text&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;.globl&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;switch_eg&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;.type&lt;/span&gt;   &lt;span class=&#34;nv&#34;&gt;switch_eg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;function&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;switch_eg:&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;.LFB0:&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;.cfi_startproc&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;pushl&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;ebp&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;.cfi_def_cfa_offset&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;.cfi_offset&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;ebp&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;.cfi_def_cfa_register&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;subl&lt;/span&gt;    &lt;span class=&#34;kc&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;esp&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;ebp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;ebp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;ebp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;subl&lt;/span&gt;    &lt;span class=&#34;kc&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;cmpl&lt;/span&gt;    &lt;span class=&#34;kc&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;ja&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;.L2&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;.L7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;.section&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;.rodata&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;.align&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;.align&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;.L7:&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;.long&lt;/span&gt;   &lt;span class=&#34;nv&#34;&gt;.L3&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;.long&lt;/span&gt;   &lt;span class=&#34;nv&#34;&gt;.L2&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;.long&lt;/span&gt;   &lt;span class=&#34;nv&#34;&gt;.L4&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;.long&lt;/span&gt;   &lt;span class=&#34;nv&#34;&gt;.L5&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;.long&lt;/span&gt;   &lt;span class=&#34;nv&#34;&gt;.L6&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;.long&lt;/span&gt;   &lt;span class=&#34;nv&#34;&gt;.L2&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;.long&lt;/span&gt;   &lt;span class=&#34;nv&#34;&gt;.L6&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;.L3:&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;ebp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;addl&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;addl&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;sall&lt;/span&gt;    &lt;span class=&#34;kc&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;addl&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;ebp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.L8&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;.L4:&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;addl&lt;/span&gt;    &lt;span class=&#34;kc&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;ebp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;.L5:&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;addl&lt;/span&gt;    &lt;span class=&#34;kc&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;ebp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.L8&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;.L6:&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;ebp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;imull&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;ebp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;ebp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;.L8&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;.L2:&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;kc&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;ebp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;.L8:&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;ebp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;leave&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;.cfi_restore&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;.cfi_def_cfa&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;.cfi_endproc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Una vez que disponemos del ejemplo representado de 3 formas distintas, profundicemos en el funcionamiento.&lt;/p&gt;

&lt;p&gt;En la versión extendida de C se define el array &lt;strong&gt;jt&lt;/strong&gt; que contiene siete entradas, cada una es la dirección de un bloque de código. Dichos bloques de código se definen con etiquetas en el código (&lt;em&gt;loc_A, loc_def etc&lt;/em&gt;) e identificadas en el array &lt;strong&gt;jt&lt;/strong&gt; por &lt;em&gt;punteros a código&lt;/em&gt;. Para conseguir un puntero a un trozo de código hay que anteponer &lt;em&gt;&amp;amp;&amp;amp;&lt;/em&gt; a la etiqueta. El operador &lt;em&gt;&amp;amp;&lt;/em&gt; crea un puntero para el valor de un dato. Cuando se creó esta extensión de C, los autores crearon el operador &lt;em&gt;&amp;amp;&amp;amp;&lt;/em&gt; para hacer referencia a la dirección de una porción de código.&lt;/p&gt;

&lt;p&gt;El código C tiene cases para los valores &lt;em&gt;100, 102-104 y 106&lt;/em&gt;, pero la variable &lt;em&gt;n&lt;/em&gt; puede contener cualquier valor entero. El compilador desplaza el rango a los valores 0-6, restando 100 a &lt;em&gt;n&lt;/em&gt;. Creando así una nueva variable que llamaremos &lt;em&gt;index&lt;/em&gt; en la versión C del código. Al hacer este desplazamiento facilita las posibilidades de ramificación tratando a &lt;em&gt;index&lt;/em&gt; como un valor sin signo &lt;em&gt;(unsigned&lt;/em&gt;). Así, se sabrá fácilmente que &lt;em&gt;index&lt;/em&gt; está fuera del rango 0-6 cuando sea mayor que 6. Tanto en el código C como ensamblador hay cinco posiciones distintas a las que saltar basandose en el valor de &lt;em&gt;index&lt;/em&gt;. Las posiciones son:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;loc_A » Identificado en código ensamblador como .L3&lt;/li&gt;
&lt;li&gt;loc_B » .L4&lt;/li&gt;
&lt;li&gt;loc_C » .L5&lt;/li&gt;
&lt;li&gt;loc_D » .L6&lt;/li&gt;
&lt;li&gt;loc_def » .L2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cada una de estas etiquetas identifica el trozo de código a ejecutar en función de valor de index. En las versiones ensamblador y C extendido se compara el &lt;em&gt;index&lt;/em&gt; con 6, si es mayor se salta al case por defecto.&lt;/p&gt;

&lt;p&gt;El paso clave en la ejecución de una sentencia switch es acceder a una posición de código mediante la tabla de saltos, cosa que pasa en la línea 16 del código C extendido con la sentencia &lt;strong&gt;goto&lt;/strong&gt; que referencia a la tabla de saltos &lt;em&gt;jt&lt;/em&gt;. En la versión ensamblador, ocurre algo similar en la línea 21. El cálculo de a qué elemento del array jt se accede está en la línea 20 concretamente &lt;em&gt;.L7(,%eax,4)&lt;/em&gt;. .L7 es la tabla de saltos, si observamos el contenido&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;.L7:&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.long&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;.L3&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.long&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;.L2&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.long&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;.L4&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.long&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;.L5&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.long&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;.L6&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.long&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;.L2&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.long&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;.L6&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.text&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;se aprecia que contiene las distintas etiquetas a las que se saltará posteriormente. Con &lt;em&gt;.L7(,%eax,4)&lt;/em&gt; se está accediendo al elemento de índice %eax. Es decir se especifica una localización de memoria indexada por el valor del registro %eax (Que contiene el valor de &lt;em&gt;index&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;El * de la línea 21 indica que se trata de un salto indirecto.&lt;/p&gt;

&lt;p&gt;En la versión C extendida, se declara la tabla de saltos como un array de siete elementos, cada elemento es un puntero a una sección de código. El encargado de seleccionar los elementos del array es &lt;em&gt;index&lt;/em&gt;, y su valor oscila entre 0-6. Hay que destacar, que los valores de index van en correspondencia con los posibles valores de n, 100-106.&lt;/p&gt;

&lt;p&gt;Echemos un vistazo a la tabla de saltos:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_def&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_C&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_D&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_def&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_D&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Algunos valores están duplicados, por ejemplo &lt;em&gt;loc_D&lt;/em&gt; aparece en la posición 4 y 6 del array. Es lógico ya que para los valores 104 y 106 se debe ejecutar la misma porción del código:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;104&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;106&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;En el caso &lt;em&gt;index = 5&lt;/em&gt; o &lt;em&gt;index = 1&lt;/em&gt; (No existe case para 105 o 101), se saltará al trozo de código etiquetado como &lt;em&gt;loc_def&lt;/em&gt;, correspondiente al &lt;em&gt;default&lt;/em&gt; del switch. Ahora estamos en condiciones de comprender mejor la estructura de la tabla de saltos en código ensamblador:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.section&lt;/span&gt;    &lt;span class=&#34;no&#34;&gt;.rodata&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.align&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;        &lt;span class=&#34;err&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;Alinea&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;las&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;direcciones&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;multiplos&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;de&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;Un&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;entero&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ocupa&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.align&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;.L7:&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.long&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;.L3&lt;/span&gt;      &lt;span class=&#34;err&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;loc_A&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.long&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;.L2&lt;/span&gt;      &lt;span class=&#34;err&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;101&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;loc_def&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.long&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;.L4&lt;/span&gt;      &lt;span class=&#34;err&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;102&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;loc_B&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.long&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;.L5&lt;/span&gt;      &lt;span class=&#34;err&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;103&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;loc_C&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.long&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;.L6&lt;/span&gt;      &lt;span class=&#34;err&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;104&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;lod_D&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.long&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;.L2&lt;/span&gt;      &lt;span class=&#34;err&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;105&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;loc_def&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.long&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;.L6&lt;/span&gt;      &lt;span class=&#34;err&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;106&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;loc_D&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;.text&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Estas declaraciones dicen que dentro de la sección llamada &lt;strong&gt;.rodata&lt;/strong&gt; &lt;em&gt;(Read-Only Data)&lt;/em&gt; debería haber una secuencia de siete palabras &lt;strong&gt;long&lt;/strong&gt; (4-byte) cuyo valor se dá por la dirección de la instrucción asociada a la etiqueta (.L3 etc). La etiqueta &lt;strong&gt;.L7&lt;/strong&gt; marca el inicio de la asignación de la tabla de saltos. La dirección asociada a esta etiqueta sirve como la base para el salto indirecto en la línea 21.
Tanto en la versión extendida de C, como en ensamblador, el código asociado a las etiquetas (loc_* para extended C y .L* para ensamblador) implementan las distintas ramas del switch. La mayoría calculan un valor para devolver en la variable &lt;em&gt;result&lt;/em&gt; (o el registro &lt;em&gt;%eax&lt;/em&gt;) y saltan al final de la función (en el código ensamblador se salta a la etiqueta &lt;strong&gt;.L8&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;El patrón seguido para calcular un resultado no se da para los cases 102 y 103 en el código C. La lógica del programa para estos dos casos en las versiones ensamblador y C extendido es tener dos destinos ditintos para ambos casos (*loc_C, loc_B y .L5, .L4 *). Los dos bloques de código convergen en el código que incrementa &lt;em&gt;result&lt;/em&gt; en 11 (etiquetado como &lt;em&gt;rest&lt;/em&gt; en C extendido y .L5 en ensamblador)&lt;/p&gt;

&lt;p&gt;Comprender todo el código visto requiere examinarlo con detenimiento y paso a paso. Aún así, el objetivo de este artículo era demostrar que el uso de tablas de salto o &lt;strong&gt;jump tables&lt;/strong&gt; permite una forma muy eficiente de implementar ramas multidireccionales. En este ejemplo, el programa puede ramificarse a cinco posiciones distintas de un solo salto, incluso si tuvieramos un switch con cientos de cases, sería manejado con un solo acceso a la tabla de saltos.&lt;/p&gt;

&lt;p&gt;La versión ensamblador de arriba corresponde a la compilación para procesadores de 32 Bits, a continuación la versión para 64-Bits:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;.file&lt;/span&gt;   &lt;span class=&#34;s&#34;&gt;&amp;quot;sw.c&amp;quot;&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;.globl&lt;/span&gt;  &lt;span class=&#34;no&#34;&gt;switch_eg&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;.type&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;switch_eg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;@function&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;switch_eg:&lt;/span&gt;
    &lt;span class=&#34;nl&#34;&gt;.LFB0:&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.cfi_startproc&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;pushq&lt;/span&gt;   &lt;span class=&#34;nv&#34;&gt;%rbp&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.cfi_def_cfa_offset&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.cfi_offset&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movq&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;%rsp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%rbp&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.cfi_def_cfa_register&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;%edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rbp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;%esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rbp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rbp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;%eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rbp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rbp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;subl&lt;/span&gt;    &lt;span class=&#34;no&#34;&gt;$100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;cmpl&lt;/span&gt;    &lt;span class=&#34;no&#34;&gt;$6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;ja&lt;/span&gt;  &lt;span class=&#34;no&#34;&gt;.L2&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;%eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movq&lt;/span&gt;    &lt;span class=&#34;no&#34;&gt;.L7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rax&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.section&lt;/span&gt;    &lt;span class=&#34;no&#34;&gt;.rodata&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.align&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.align&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;.L7:&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.quad&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;.L3&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.quad&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;.L2&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.quad&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;.L4&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.quad&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;.L5&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.quad&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;.L6&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.quad&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;.L2&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.quad&lt;/span&gt;   &lt;span class=&#34;no&#34;&gt;.L6&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.text&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;.L3:&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rbp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%edx&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;%edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;addl&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;%eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;addl&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;%edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;sall&lt;/span&gt;    &lt;span class=&#34;no&#34;&gt;$2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;addl&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;%edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;%eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rbp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;.L8&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;.L4:&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;addl&lt;/span&gt;    &lt;span class=&#34;no&#34;&gt;$10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rbp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;.L5:&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;addl&lt;/span&gt;    &lt;span class=&#34;no&#34;&gt;$11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rbp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;.L8&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;.L6:&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rbp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;imull&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rbp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;%eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rbp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;jmp&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;.L8&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;.L2:&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;no&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rbp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nl&#34;&gt;.L8:&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;movl&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;%rbp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;%eax&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;popq&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;%rbp&lt;/span&gt;
    &lt;span class=&#34;na&#34;&gt;.cfi_def_cfa&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
    &lt;span class=&#34;nf&#34;&gt;ret&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;.cfi_endproc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Tras analizar y entender cómo se implementa el switch, la razón por la que es más rápido que una sucesión de if-then-else es simple. El factor determinante es la existencia de la tabla de saltos y que solo se requiere de una comparación para determinar a qué sentencia case saltar. Mientras que en una secuencia de if-then-else se requiere la comprobación de todas y cada una de las expresiones que comprenden el if, hasta que se satisfaga alguna o se llegue al final del bloque.&lt;/p&gt;

&lt;h2 id=&#34;referencias&#34;&gt;Referencias&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Computer Systems: A Programmer&amp;rsquo;s Perspective&lt;/em&gt; »» &lt;a href=&#34;http://www.amazon.es/gp/product/013034074X/ref=as_li_ss_tl?ie=UTF8&amp;camp=3626&amp;creative=24822&amp;creativeASIN=013034074X&amp;linkCode=as2&amp;tag=elbaudelpro-21&#34; target=&#34;_blank&#34;&gt;Ver libro en Amazon&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
