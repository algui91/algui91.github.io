<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Github on El Baúl del programador</title>
        <link>https://elbauldelprogramador.com/tags/github/</link>
        <description>Recent content in Github on El Baúl del programador</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>es-ES</language>
        <lastBuildDate>Fri, 08 Sep 2017 12:15:30 +0100</lastBuildDate>
        <image>
            <url>https://elbauldelprogramador.com/img/bio-photo-rss.png</url>
            <link>https://elbauldelprogramador.com/tags/github/</link>
            <title>Github on El Baúl del programador</title>
            <width>144</width>
            <height>144</height>
        </image>
        <atom:link href="https://elbauldelprogramador.com/tags/github/" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Sincronización de proyectos en git con hooks (ganchos)</title>
            <link>https://elbauldelprogramador.com/sincronizacin-de-proyectos-en-git-con-hooks-ganchos/</link>
            <pubDate>Fri, 08 Sep 2017 12:15:30 +0100</pubDate>
            
            <guid>https://elbauldelprogramador.com/sincronizacin-de-proyectos-en-git-con-hooks-ganchos/</guid>
            <description>&lt;figure&gt;
    &lt;img sizes=&#34;(min-width: 910px) 913px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/2013/03/git-logo.png&#34; title=&#34;Sincronización de proyectos en git con hooks (ganchos)&#34; alt=&#34;Sincronización de proyectos en git con hooks (ganchos)&#34; width=&#34;910px&#34; height=&#34;380px&#34; /&gt;
&lt;/figure&gt;

&lt;h1 id=&#34;repositorio-espejo-mirror-repo&#34;&gt;Repositorio espejo (Mirror repo)&lt;/h1&gt;

&lt;h2 id=&#34;problema&#34;&gt;Problema&lt;/h2&gt;

&lt;p&gt;Hace unos días me encontré con un problema a resolver. Supongamos que tenemos dos repositorios en &lt;a href=&#34;https://elbauldelprogramador.com/mini-tutorial-y-chuleta-de-comandos-git/&#34; title=&#34;Chuleta de comandos en git&#34;&gt;git&lt;/a&gt;, y queremos que todo lo que publicamos en uno se publique automáticamente en el otro, para mantenerlos sincronizados. Ésto es lo que se llama un repo espejo (&lt;em&gt;mirror repos&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;&lt;!--ad--&gt;&lt;/p&gt;

&lt;h2 id=&#34;repositorios-a-sincronizar&#34;&gt;Repositorios a sincronizar&lt;/h2&gt;

&lt;p&gt;Supongamos que los repositorios se llaman &lt;em&gt;repo1&lt;/em&gt; y &lt;em&gt;repo2&lt;/em&gt;. Pretendemos que &lt;em&gt;repo2&lt;/em&gt; esté sincronizado (sea un espejo) del &lt;em&gt;repo1&lt;/em&gt;. Ésto significa que no tendremos que clonar en ningún momento el &lt;em&gt;repo2&lt;/em&gt;. En local únicamente tendremos el &lt;em&gt;repo1&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;solución&#34;&gt;Solución&lt;/h2&gt;

&lt;p&gt;La respuesta, como es habitual, la encontré tras buscar un poco en &lt;em&gt;stackoverflow&lt;/em&gt;. Gracias a &lt;a href=&#34;http://stackoverflow.com/users/140185/manoj-govindan&#34; title=&#34;Perfil en stackoverflow&#34;&gt;Manoj Govindan&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;añadir-repo2-como-remote&#34;&gt;Añadir repo2 como remote&lt;/h2&gt;

&lt;p&gt;Dentro de &lt;em&gt;repo1&lt;/em&gt; añadiremos un nuevo &lt;em&gt;remote&lt;/em&gt; que sea el &lt;em&gt;repo2&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;git remote add repo2 &amp;lt;url-repo2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;configurar-el-hook-gancho-post-commit&#34;&gt;Configurar el hook (gancho) post-commit&lt;/h2&gt;

&lt;p&gt;Dentro del repositorio, crearemos un nuevo &lt;em&gt;hook&lt;/em&gt; que se ejecute cada vez que hagamos un &lt;em&gt;commit&lt;/em&gt; en &lt;em&gt;repo1&lt;/em&gt;. Por cada &lt;em&gt;commit&lt;/em&gt;, ejecutaremos un &lt;em&gt;git push repo2&lt;/em&gt;, lo cual enviará los cambios al &lt;em&gt;repo2&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Crear el hook que se ejecutará en cada commit&lt;/span&gt;
mv .git/hooks/pre-commit.sample .git/hooks/post-commit
&lt;span class=&#34;c1&#34;&gt;# Añadir el comando a ejecutar&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -e &lt;span class=&#34;s2&#34;&gt;&amp;quot;#!/bin/bash\n\ngit push repo2 -f --mirror&amp;quot;&lt;/span&gt; &amp;gt; .git/hooks/post-commit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;En contenido del &lt;em&gt;hook&lt;/em&gt;, para que se vea más claro es el siguiente:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;#!/bin/bash&lt;/span&gt;

git push repo2 -f --mirror
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;conclusión&#34;&gt;Conclusión&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; Con este gancho, se mantendrán sincronizados ambos repositorios. Es necesario notar que tras hacer el &lt;em&gt;commit&lt;/em&gt; del &lt;em&gt;repo1&lt;/em&gt;, sigue siendo necesario ejecutar &lt;code&gt;git push&lt;/code&gt; en &lt;em&gt;repo1&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&#34;mantener-sincronizada-una-única-rama&#34;&gt;Mantener sincronizada una única rama&lt;/h1&gt;

&lt;p&gt;Un problema similar podría ser mantener sincronizado en &lt;em&gt;repo2&lt;/em&gt; únicamente las ramas &lt;em&gt;master&lt;/em&gt;. De forma que podamos crear tantas ramas como necesitemos en &lt;em&gt;repo1&lt;/em&gt; sin que se vean reflejadas en &lt;em&gt;repo2&lt;/em&gt;. Para ello, en lugar de usar el &lt;em&gt;hook&lt;/em&gt; &lt;code&gt;post-commit&lt;/code&gt;, usaremos &lt;code&gt;post-merge&lt;/code&gt;. Éste &lt;em&gt;hook&lt;/em&gt; se ejecutará cada vez que se haga un &lt;code&gt;git merge &amp;lt;rama distinta=&amp;quot;distinta&amp;quot; de=&amp;quot;de&amp;quot; master=&amp;quot;master&amp;quot;&amp;gt;&lt;/code&gt; sobre master.&lt;/p&gt;

&lt;p&gt;Para activarlo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Crear el hook que se ejecutará en cada commit&lt;/span&gt;
mv .git/hooks/pre-commit.sample .git/hooks/post-merge
&lt;span class=&#34;c1&#34;&gt;# Añadir el comando a ejecutar&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -e &lt;span class=&#34;s2&#34;&gt;&amp;quot;#!/bin/bash\n\ngit push repo2 master:master&amp;quot;&lt;/span&gt; &amp;gt; .git/hooks/post-merge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;El contenido del &lt;em&gt;hook&lt;/em&gt; es:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;#!/bin/bash&lt;/span&gt;

git push repo2 master:master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;git push repo2 master:master&lt;/code&gt; podría leerse como: &lt;em&gt;Publica en el repo2 en la rama master, el contenido de la rama master del repo actual&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&#34;referencias&#34;&gt;Referencias&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/3583061/automatically-mirror-a-git-repository&#34;&gt;Automatically mirror a git repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
        <item>
            <title>Minería en tu comunidad de github con R - Analizando la popularidad de los lenguajes</title>
            <link>https://elbauldelprogramador.com/githubmininglanguages/</link>
            <pubDate>Tue, 25 Apr 2017 18:34:49 +0200</pubDate>
            
            <guid>https://elbauldelprogramador.com/githubmininglanguages/</guid>
            <description>&lt;p&gt;En este post vamos a explorar nuestra comunidad de &lt;a href=&#34;https://elbauldelprogramador.com/tags/git/&#34; title=&#34;Github&#34;&gt;Github&lt;/a&gt;, considerando nuestros amigos (nuestros seguidores) en esta red social. En primer lugar daremos algunas indicaciones para crear una aplicación y empezar a usar la &lt;a href=&#34;https://elbauldelprogramador.com/tags/api/&#34; title=&#34;API&#34;&gt;API&lt;/a&gt;  de github. Después extraeremos la información que necesitamos para realizar nuestro análisis, y así obtener que lenguajes de programación son más usados por nuestros amigos, y cuales los menos usados. ¡Exploremos la popularidad de los lenguajes en nuestra comunidad!&lt;/p&gt;

&lt;h1 id=&#34;1-crear-la-app-instalar-paquetes-autenticarse&#34;&gt;1. Crear la app, instalar paquetes, autenticarse&lt;/h1&gt;

&lt;h2 id=&#34;1-1-registrar-la-app&#34;&gt;1.1 Registrar la app&lt;/h2&gt;

&lt;p&gt;Antes de nada, ya que queremos acceder a datos públicos de github, ncesitaremos registrar una app con autenticación para ello. Esto nos permitirá no tener límite de llamadas a la API.
Así que dirígete a &lt;a href=&#34;https://developer.github.com/program/&#34; title=&#34;la página del programa de desarrolladores de github&#34;&gt;github developer program page&lt;/a&gt; y clica en &lt;strong&gt;Register now&lt;/strong&gt;. Luego, selecciona una cuenta (debe aparecer un listado de tus cuentas de github) y en la pestaña de &lt;strong&gt;Personal settings&lt;/strong&gt; selecciona  &lt;strong&gt;Authorized applications&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Si ya tienes una aplicación autorizada para acceder a la API de github, deberás visualizarla aquí.  Sino tienes ninguna app registrada aún, vete a &lt;strong&gt;OAuth applications&lt;/strong&gt; (bajo &lt;em&gt;Personal settings&lt;/em&gt;) y selecciona &lt;strong&gt;Register a new application&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ahora tienes que registrar tu nueva app, darle un nombre, una descripción&amp;hellip; completa los campos y en &lt;strong&gt;Callback URL&lt;/strong&gt; introduce: &lt;a href=&#34;http://localhost:1410/&#34; title=&#34;localhost:1410&#34;&gt;localhost:1410&lt;/a&gt;, que es la url a la que github devolverá cuando se autentique la app.&lt;/p&gt;

&lt;p&gt;Ahora que tienes registrada tu app, se generarán su &lt;strong&gt;Client ID&lt;/strong&gt; y &lt;strong&gt;Client Secret&lt;/strong&gt;. Puedes verlos en &lt;strong&gt;OAuth applications -&amp;gt; Your App&lt;/strong&gt;. Recuerda mantenerlos siempre en secreto y a salvo.&lt;/p&gt;

&lt;p&gt;¡Bien! pues ya eres miembro del programa de &lt;em&gt;developers&lt;/em&gt;. Lo siguiente que haremos es instalar los paquetes de &lt;a href=&#34;https://elbauldelprogramador.com/tags/r/&#34; title=&#34;R&#34;&gt;R&lt;/a&gt; que vamos a usar para trabajar.&lt;/p&gt;

&lt;p&gt;&lt;!--ad--&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-2-instalación-de-paquetes&#34;&gt;1.2 Instalación de paquetes&lt;/h2&gt;

&lt;p&gt;Usaremos la versión 3 de la API de GitHub para obtener los datos &lt;a href=&#34;https://developer.github.com/v3/&#34; title=&#34;github v3 API&#34;&gt;github v3 API&lt;/a&gt;. Ya que la API devuelve los datos en formato &lt;a href=&#34;https://elbauldelprogramador.com/tags/json/&#34; title=&#34;JSON&#34;&gt;JSON&lt;/a&gt;, vamos a usar la función &lt;code&gt;fromJSON&lt;/code&gt;, que nos permitirá usar la url de la API directamente y nos parsea los datos JSON devueltos en formato &lt;em&gt;dataframe&lt;/em&gt;. Ésta función se encuentra en el paquete &lt;code&gt;jsonlite&lt;/code&gt;, así que tenemos que instalar ese paquete si no lo tenemos ya instalado:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span&gt;&lt;/span&gt;install.packages&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;jsonlite&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Si no tienes instalado el paquete &lt;code&gt;stringr&lt;/code&gt;, instálalo tal como acabamos de hacer con &lt;code&gt;jsonlite&lt;/code&gt;. Lo usaremos para hacer operaciones comunes con &lt;em&gt;strings&lt;/em&gt;. Instala también &lt;code&gt;ggplot2&lt;/code&gt; si no lo tienes instalado. Lo usaremos para las gráficas y &lt;code&gt;httpuv&lt;/code&gt;, un paquete para poder trabajar con HTTP.&lt;/p&gt;

&lt;p&gt;Para conectarse a la app the github, necesitaremos instalar el paquete &lt;code&gt;rgithub&lt;/code&gt;. Puedes hacerlo directamente desde el código fuente en github. Date cuenta que depende del paquete &lt;code&gt;devtools&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;devtools&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
install_github&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;cscheid/rgithub&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Tras la instalación, carga las librerías:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# load libraries&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;github&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;jsonlite&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;stringr&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;ggplot2&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;1-3-autentica-el-acceso&#34;&gt;1.3 Autentica el acceso&lt;/h2&gt;

&lt;p&gt;Necesitaremos &lt;a href=&#34;https://elbauldelprogramador.com/tags/seguridad/&#34; title=&#34;Post sobre seguridad&#34;&gt;autenticar&lt;/a&gt; el acceso, y lo haremos a través de la función &lt;code&gt;interactive.login&lt;/code&gt; del paquete &lt;code&gt;rgithub&lt;/code&gt;, pasándole nuestro &lt;strong&gt;ID&lt;/strong&gt; y &lt;strong&gt;secreto&lt;/strong&gt;. Mi recomendación es que pongas estas líneas en un fichero separado y no las compartas con nadie. Sólo haz un &lt;em&gt;source&lt;/em&gt; del fichero cuando necesites autenticarte o ejecuta las líneas de nuevo.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# github app autentication&lt;/span&gt;
clientID&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;your_client_id_goes_here&amp;quot;&lt;/span&gt;
clientSecret&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;your_secret_goes_here&amp;quot;&lt;/span&gt;
context&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;interactive.login&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;clientID&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;clientSecret&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;2-obtener-la-información-de-tus-amigos&#34;&gt;2. Obtener la información de tus amigos&lt;/h1&gt;

&lt;p&gt;Ya estás autenticado. Lo que sigue es obtener tus seguidores de GitHub. Para obtener los usuarios que nos siguen e información sobre ellos, usaremos la función &lt;code&gt;get.my.followers&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# get your followers&lt;/span&gt;
myFollowers&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;get.my.followers&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;context&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Podemos comprobar fácilmente cuantos seguidores tenemos usando la función &lt;code&gt;length&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# get number of my followers&lt;/span&gt;
numFollowing&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;myFollowers&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;content&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ahora que tenemos nuestros seguidores, vamos a crear un &lt;em&gt;dataframe&lt;/em&gt; para guardar toda la información obtenida. Primero, extraemos cada línea de contenido de la lista de &lt;em&gt;myFollowers&lt;/em&gt;, y la vamos añadiendo a una variable &lt;em&gt;dataset&lt;/em&gt; usando la función &lt;code&gt;rbind&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# create a dataset with your followers&lt;/span&gt;
dataset&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;unlist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;myFollowers&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;content&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]])&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;i &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;myFollowers&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;content&lt;span class=&#34;p&#34;&gt;)){&lt;/span&gt;
  dataset&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;rbind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;dataset&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;unlist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;myFollowers&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;content&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;i&lt;span class=&#34;p&#34;&gt;]]))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ahora que tenemos el &lt;em&gt;dataframe&lt;/em&gt;, nombra a las columnas como se llamaban originalmente en &lt;em&gt;myFollowers$content&lt;/em&gt; y guárdalo en un &lt;em&gt;csv&lt;/em&gt; para poder reutilizarlo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# create a data frame and save it for later use&lt;/span&gt;
dataset&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;unname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;dataset&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
dataset&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;as.data.frame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;dataset&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kp&#34;&gt;colnames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;dataset&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;myFollowers&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;content&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]))&lt;/span&gt;
write.csv&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;dataset&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;file&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;CrisFollowers.csv&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Obviamente lo puedes guardar con el nombre que quieras. Pero no olvides la extensión.&lt;/p&gt;

&lt;h1 id=&#34;3-obtener-la-información-de-los-repositorios-de-tus-amigos-y-crear-un-nuevo-conjunto-de-datos&#34;&gt;3. Obtener la información de los repositorios de tus amigos y crear un nuevo conjunto de datos&lt;/h1&gt;

&lt;p&gt;Como ya te habrás percatado, en los últimos datos que extraímos había información acerca del nombre de nuestros seguidores, su id, avatar, tipo&amp;hellip; y algunas url de interés. Sin embargo, en esa información no aparecía la información de los repositorios que necesitamos para nuestro análisis, como nombres de los repositorios, lenguaje de los repositorios, número de líneas de código&amp;hellip;&lt;/p&gt;

&lt;p&gt;Debemos obtener esa información. Si has explorado un poco el dataset, te habrás dado cuenta de que existe una columna, llamada  &lt;strong&gt;repos_url&lt;/strong&gt; que nos dice que la url para obtener los repositorios dado un usuario cualquiera, es: &lt;strong&gt;&lt;a href=&#34;https://api.github.com/users/user/repos&#34;&gt;https://api.github.com/users/user/repos&lt;/a&gt;&lt;/strong&gt;. Por ejemplo, para obtener la información de cuales son mis repositorios, etc, deberemos llamar a la API  &lt;strong&gt;&lt;a href=&#34;https://api.github.com/users/CritinaHG/repos&#34;&gt;https://api.github.com/users/CritinaHG/repos&lt;/a&gt;&lt;/strong&gt; , y obtendremos los datos que queremos en formato JSON.&lt;/p&gt;

&lt;p&gt;Así que obtendremos esos datos para cada usuario leyendo el dataset que creamos anteriormente, obteniendo de él los nombres de nuestros seguidores, componiendo la correspondiente url de sus repos y parseando los datos obtenidos de la API usando la función &lt;code&gt;fromJSON&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# read latest created csv&lt;/span&gt;
myFriends&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;read.csv&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;CrisFollowers.csv&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# extract the names&lt;/span&gt;
&lt;span class=&#34;kp&#34;&gt;unname&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;as.character&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;myFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;login&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# extract data from friends&amp;#39; public repositories&lt;/span&gt;
compdata&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;NULL&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;i &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;nrow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;myFriends&lt;span class=&#34;p&#34;&gt;)){&lt;/span&gt;
  data&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;fromJSON&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;paste0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;https://api.github.com/users/&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;str_trim&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;unname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;side &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;both&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;/repos?clientID&amp;amp;clientSecret&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    data&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;data&lt;span class=&#34;p&#34;&gt;[,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;-4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    compdata&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;rbind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;compdata&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;data&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# write data for reuse&lt;/span&gt;
write.csv&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;compdata&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;UsersWithRepoInfo.csv&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Debes sustituir &lt;strong&gt;clientID&lt;/strong&gt; y &lt;strong&gt;clientSecret&lt;/strong&gt; por el id y secreto de tu app, generados al principio del post. No es necesario especificarle estos parámetros, pero hacerlo nos permite evitar limitaciones en las peticiones. Se elimina la 4º columna porque contiene información redundante, y se usa &lt;code&gt;rbind&lt;/code&gt; para ir agregando los datos que se van obteniendo al nuevo &lt;em&gt;dataset&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&#34;4-haciendo-un-poco-de-procesamiento&#34;&gt;4. Haciendo un poco de procesamiento&lt;/h1&gt;

&lt;p&gt;Lee (si no tienes leído) el &lt;em&gt;dataset&lt;/em&gt; &lt;code&gt;activeFriends&amp;lt;-read.csv(&amp;quot;UsersWithRepoInfo.csv&amp;quot;)&lt;/code&gt;. Vamos a hacerle algunas transformaciones a los datos para hacerlos más manejables con R.&lt;/p&gt;

&lt;p&gt;En primer lugar, como la zona horaria es UTC+2 (o la de Madrid), necesitamos establecer el parámetro timezone. Construimos una función para realizar el formateo y lo aplicamos a cada columna con fechas del &lt;em&gt;dataset&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# make date format supported by R&lt;/span&gt;
date.format&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;datestring&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
  &lt;span class=&#34;kp&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;as.POSIXct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;datestring&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;format&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;%Y-%m-%d %H:%M:%S&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;tz&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Europe/Madrid&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; usetz&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# update dates with new format&lt;/span&gt;
activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;created_at&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;date.format&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;created_at&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;updated_at&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;date.format&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;updated_at&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;pushed_at&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;date.format&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;pushed_at&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Siéntete libre de explorar el conjunto de datos. Seguro que estás pensando que en él hay columnas que nos interesan para nuestro análisis, y otras que no tanto. Lo siguiente que haremos será seleccionar las que más nos interesan para nuestro análisis:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# selecting just the interesting cols&lt;/span&gt;
activeFriends&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;activeFriends&lt;span class=&#34;p&#34;&gt;[,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;full_name&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;private&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;fork&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;created_at&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;updated_at&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;pushed_at&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;homepage&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;size&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;stargazers_count&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;watchers_count&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;language&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;                             &lt;span class=&#34;s&#34;&gt;&amp;quot;has_issues&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;has_downloads&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;forks_count&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;open_issues_count&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;forks&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;open_issues&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;watchers&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Podemos binarizar las columnas que tienen solo valores True o False:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span&gt;&lt;/span&gt;activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;private&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;as.integer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;private&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;has_issues&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;as.integer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;has_issues&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;fork&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;as.integer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;fork&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;has_downloads&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;as.integer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;has_downloads&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Por último, la columna &lt;code&gt;full_name&lt;/code&gt; contiene el nombre de usuario junto con el nombre del repositorio. Extraemos de aquí sólo el nombre de usuario, pues el nombre del repositorio ya se incluye en la columna &lt;code&gt;name&lt;/code&gt;. Lo hacemos separando cada item por la barra que separa los nombres, y tomando el primer elemento:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Getting the username&lt;/span&gt;
activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;full_name&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;unlist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;lapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;strsplit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;as.character&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;full_name&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;split &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;fixed &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Guárdalo si quieres, para reutilizarlo más tarde.&lt;/p&gt;

&lt;h1 id=&#34;5-analizando-la-popularidad-de-los-lenguages-de-programación&#34;&gt;5. Analizando la popularidad de los lenguages de programación&lt;/h1&gt;

&lt;p&gt;Podemos hacernos una primera idea de cómo están distribuidos los datos, cual es la media, mediana, máximo, mínimo&amp;hellip; para cada columna, usando la función &lt;code&gt;summary&lt;/code&gt; en el &lt;em&gt;dataset&lt;/em&gt;.
Éste es sólo un ejemplo parte de la salida de esta función que se obtiene para mi comunidad de amigos, mostrando las métricas mencionadas para las primeras columnas:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;summary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;activeFriends&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       id                 name      full_name            private                                                                      description
Min.   &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2054512&lt;/span&gt;   IV      &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;   Length&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;524&lt;/span&gt;         Min.   &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;   Asignatura de infraestructuras virtuales para el Grado de Informática     &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;st Qu.&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;32878832&lt;/span&gt;   blog    &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;   Class &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;character&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;st Qu.&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;   Repositorio para la asignatura Infraestructura Virtual de &lt;span class=&#34;m&#34;&gt;2016-2017&lt;/span&gt;       &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
Median &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;51252063&lt;/span&gt;   DAI     &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;   Mode  &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;character&lt;/span&gt;   Median &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;   An example repo &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt; Ruby &lt;span class=&#34;kr&#34;&gt;for&lt;/span&gt; continuous integration with Travis CI         &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
Mean   &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;51191269&lt;/span&gt;   IV16&lt;span class=&#34;m&#34;&gt;-17&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;                      Mean   &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;   Curso de LaTeX organizado por AMAT para alumnos de Trabajo de Fin de Grado&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;rd Qu.&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;70082791&lt;/span&gt;   swap1415&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;                      &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;rd Qu.&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;   Diferentes scripts para representación de carreras en cifras              &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
Max.   &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;88848228&lt;/span&gt;   TFG     &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;                      Max.   &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;Other&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                                                                   &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;404&lt;/span&gt;
                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;Other&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;505&lt;/span&gt;                                  &lt;span class=&#34;kc&#34;&gt;NA&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;s                                                                      :107&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ahora vamos al tema que nos concierne: ver que lenguajes de programación se están usando en nuestra comunidad de amigos, y cuánto se usan. Para este cometido, podemos comenzar por crear una tabla de contingencia, para dar un primer vistazo a nuestra respuesta:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span&gt;&lt;/span&gt;languagesAndUse&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;language&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
languagesAndUse

         Arduino                C               C&lt;span class=&#34;c1&#34;&gt;#              C++            CLIPS              CSS             Dart&lt;/span&gt;
               &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;               &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;               &lt;span class=&#34;m&#34;&gt;55&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;               &lt;span class=&#34;m&#34;&gt;19&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
      Emacs Lisp              GAP         GDScript               Go           Groovy          Haskell             HTML
               &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;               &lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;
            Java       JavaScript Jupyter Notebook              Lex              Lua         Makefile      Mathematica
              &lt;span class=&#34;m&#34;&gt;60&lt;/span&gt;               &lt;span class=&#34;m&#34;&gt;67&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
             PHP       PostScript           Prolog           Python                R             Ruby            Scala
               &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;               &lt;span class=&#34;m&#34;&gt;56&lt;/span&gt;               &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;               &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
           Shell              TeX       TypeScript
               &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;               &lt;span class=&#34;m&#34;&gt;38&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Con &lt;code&gt;nrow(languagesAndUse)&lt;/code&gt; podemos ver el número de lenguages diferentes que se están usando en nuestra comunidad de amigos. En la mía son 31.
También podemos apreciar que hay muchos repos con código &lt;em&gt;JavaScript&lt;/em&gt;  entre mis 30 amigos, sin embargo, parece que &lt;em&gt;Scala&lt;/em&gt;, &lt;em&gt;Lua&lt;/em&gt;, &lt;em&gt;Arduino&lt;/em&gt;, &lt;em&gt;TypeScript&lt;/em&gt;, &lt;em&gt;Groovy&lt;/em&gt;, &lt;em&gt;Lex&lt;/em&gt;, &lt;em&gt;Prolog&lt;/em&gt;, &lt;em&gt;GDScript&lt;/em&gt;&amp;hellip; sólo son usados por una persona.&lt;/p&gt;

&lt;p&gt;Finalmente, usamos &lt;code&gt;qplot&lt;/code&gt; del paquete &lt;code&gt;ggplot2&lt;/code&gt; para crear un hibstograma que represente el uso de los lenguajes de programación en nuestra comunidad de github:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span&gt;&lt;/span&gt;languages&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;na.omit&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;language&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
langUssage&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;qplot&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;languages&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;geom &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;xlab &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Language&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; ylab&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Usage&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;fill&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;cornflowerblue&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
langUssage&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;theme&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;axis.text.x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; element_text&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;angle &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;hjust &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;ggtitle&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Programming languages used by my friends&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;theme&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;plot.title &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; element_text&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;hjust &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Donde usamos &lt;code&gt;na.omit&lt;/code&gt; para omitir de la representación de los datos los valores NA (lenguajes que no se hayan podido extraer). El hibstograma resultante es el siguiente:&lt;/p&gt;

&lt;figure&gt;
    &lt;img sizes=&#34;(min-width: 603px) 603px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/FriendsLanguagesUsage.png&#34; title=&#34;Programming languages used in my github community&#34; alt=&#34;Lenguajes de programación usados en mi comunidad de github&#34; width=&#34;603&#34; height=&#34;380&#34;&gt;&lt;/img&gt;
    &lt;figcaption&gt;Lenguajes usados en mi comunidad de github &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Así que, como podemos ver en la representación, &lt;em&gt;JavaScript&lt;/em&gt; es el lenguage más usado, habiendo 67 repos en total en mi comunidad de amigos que contienen código &lt;em&gt;JavaScript&lt;/em&gt;. También &lt;a href=&#34;https://elbauldelprogramador.com/tags/java&#34;&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt;, &lt;em&gt;C++&lt;/em&gt; y &lt;a href=&#34;https://elbauldelprogramador.com/tags/python&#34;&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; son muy populares en mi comunidad.&lt;/p&gt;

&lt;p&gt;Encontramos código &lt;em&gt;Tex&lt;/em&gt; en 38 repositorios, por lo que &lt;a href=&#34;https://elbauldelprogramador.com/tags/latex/&#34;&gt;&lt;em&gt;LaTeX&lt;/em&gt;&lt;/a&gt; está bastante presente en mi comunidad de amigos. También hay muchos repos con código &lt;em&gt;HTML&lt;/em&gt;, y muchos menos con código &lt;em&gt;CSS&lt;/em&gt;, &lt;em&gt;Ruby&lt;/em&gt;, &lt;em&gt;R&lt;/em&gt; and &lt;em&gt;C&lt;/em&gt;. Tras ellos, lenguages conocidos pero no amados por muchos, como &lt;a href=&#34;https://elbauldelprogramador.com/tags/php&#34;&gt;&lt;em&gt;PHP&lt;/em&gt;&lt;/a&gt;, &lt;em&gt;C#&lt;/em&gt; o &lt;em&gt;CLIPS&lt;/em&gt;, que están presentes en menos de 10 repositorios.&lt;/p&gt;

&lt;p&gt;Por último, se puede aprecidar que hay menos de 5 repositorios en total con código &lt;em&gt;Dart&lt;/em&gt;, &lt;em&gt;Go&lt;/em&gt;,&lt;em&gt;Haskell&lt;/em&gt;, &lt;em&gt;Jupyter&lt;/em&gt;, &lt;em&gt;PostScript&lt;/em&gt; y &lt;em&gt;Mathematica&lt;/em&gt;, y que sólo hay un usuario de mi comunidad usando &lt;a href=&#34;https://elbauldelprogramador.com/tags/scala&#34;&gt;&lt;em&gt;Scala&lt;/em&gt;&lt;/a&gt;, &lt;em&gt;Groovy&lt;/em&gt;, &lt;em&gt;Lua&lt;/em&gt; o &lt;em&gt;TypeScript&lt;/em&gt;. Ésto responde a mi pregunta, ya que, como mi lengugaje favorito es Scala, quería saber cuántos de mis seguidores lo usaban.&lt;/p&gt;

&lt;p&gt;Y bueno, ¿Qué sucede en tu comunidad de amigos?
¿Se usan los mismos lenguajes que en la mía? ¿Sigue Siendo JavaScript el más usado?&lt;/p&gt;

&lt;h1 id=&#34;referencias&#34;&gt;Referencias:&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://amzn.to/2q94XbW&#34; target=&#34;_blank&#34;&gt;Mastering Social Media Mining with R&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
        <item>
            <title>Cómo Eliminar Ficheros Demasiado Grandes Para GitHub</title>
            <link>https://elbauldelprogramador.com/eliminar-ficheros-grandes-github/</link>
            <pubDate>Sat, 12 Nov 2016 08:12:16 +0000</pubDate>
            
            <guid>https://elbauldelprogramador.com/eliminar-ficheros-grandes-github/</guid>
            <description>&lt;p&gt;Trabajando en un repositorio &lt;a href=&#34;https://elbauldelprogramador.com/git/&#34; title=&#34;Artículos sobre Git&#34;&gt;git&lt;/a&gt;, cometí el error de hacer un &lt;a href=&#34;https://elbauldelprogramador.com/mini-tutorial-y-chuleta-de-comandos-git/&#34; title=&#34;Git: Mini Tutorial y chuleta de comandos&#34;&gt;commit&lt;/a&gt; de un fichero demasiado grande (~240mb). Github tiene un tamaño máximo de 100mb, por lo que no me dejaba subir los cambios a Github. Tras borrar el fichero, seguía con el problema, ya que el fichero seguía en el historial del repositorio. Tras buscar un rato, encontré la solución, veamos:&lt;/p&gt;

&lt;h1 id=&#34;1-eliminar-el-fichero-del-historial-de-git&#34;&gt;1. Eliminar el fichero del historial de git&lt;/h1&gt;

&lt;p&gt;Para ello basta ejecutar el siguiente comando:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git filter-branch --index-filter &lt;span class=&#34;s1&#34;&gt;&amp;#39;git rm -r --cached --ignore-unmatch &amp;lt;file/dir&amp;gt;&amp;#39;&lt;/span&gt; HEAD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;!--ad--&gt;&lt;/p&gt;

&lt;p&gt;Y reemplazar &lt;code&gt;&amp;lt;file/dir&amp;gt;&lt;/code&gt; con la ruta de nuestro fichero.&lt;/p&gt;

&lt;h1 id=&#34;2-eliminar-por-completo-el-rastro-del-fichero&#34;&gt;2. Eliminar por completo el rastro del fichero&lt;/h1&gt;

&lt;p&gt;El comando anterior crea una copia de seguridad en caso de que hayamos cometido un error, si ejecutamos&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git lola --name-status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Veremos un commit parecido a este (&lt;code&gt;* SHA1 (refs/original/refs/heads/master) mensaje del commit&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;En este commit aún está el fichero problemático, para borrarlo definitivamente:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git update-ref -d refs/original/refs/heads/master
$ git reflog expire --expire&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;now --all
$ git gc --prune&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;now
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;3-enviar-los-cambios&#34;&gt;3. Enviar los cambios&lt;/h1&gt;

&lt;p&gt;Una vez hecho esto, solo resta enviar los cambios a Github:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Y habremos solucionado el problema.&lt;/p&gt;

&lt;h1 id=&#34;fuentes&#34;&gt;Fuentes&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/2100907/how-to-remove-delete-a-large-file-from-commit-history-in-git-repository&#34; title=&#34;How to remove/delete a large file from commit history in Git repository?&#34;&gt;How to remove/delete a large file from commit history in Git repository?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/19573031/cant-push-to-github-because-of-large-file-which-i-already-deleted&#34; title=&#34;Can&#39;t push to GitHub because of large file which I already deleted&#34;&gt;Can&amp;rsquo;t push to GitHub because of large file which I already deleted&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
        <item>
            <title>21 alias útiles para git</title>
            <link>https://elbauldelprogramador.com/21-aliases-utiles-para-git/</link>
            <pubDate>Tue, 01 Dec 2015 10:56:26 +0000</pubDate>
            
            <guid>https://elbauldelprogramador.com/21-aliases-utiles-para-git/</guid>
            <description>&lt;p&gt;Todo aquel que use &lt;a href=&#34;https://elbauldelprogramador.com/mini-tutorial-y-chuleta-de-comandos-git/&#34; title=&#34;Tutorial de Git&#34;&gt;git&lt;/a&gt; sabrá que en ocasiones es un poco tedioso escribir los comandos a ejecutar. Para ello existen los &lt;em&gt;alias&lt;/em&gt;, que nos permiten crearnos atajos a la hora de ejecutar un comando. En este artículo se recopilarán unos cuantos &lt;em&gt;alias&lt;/em&gt; útiles para el día a día. Os animo a que comentéis vuestros preferidos para ir aumentando la lista!. Comencemos.&lt;/p&gt;

&lt;p&gt;&lt;!--ad--&gt;&lt;/p&gt;

&lt;h1 id=&#34;git-ec&#34;&gt;git ec&lt;/h1&gt;

&lt;p&gt;Como no, el primer alias tenía que ser uno que nos permita editar la configuración de git rápidamente:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;git config --global alias.ec &lt;span class=&#34;s2&#34;&gt;&amp;quot;config --global -e&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A partir de ahora, podremos abrir la configuración de git con nuestro editor por defecto con &lt;code&gt;git ec&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;El resto del artículo asumirá que se tiene la configuración abierta con un editor, los aliases se escribirán directamente en la sección &lt;code&gt;[alias]&lt;/code&gt; de dicho fichero.&lt;/p&gt;

&lt;h1 id=&#34;git-co-br-cm-st&#34;&gt;git co, br, cm, st&lt;/h1&gt;

&lt;p&gt;Estos &lt;em&gt;aliases&lt;/em&gt; pretenden más que facilitar la escritura de &lt;code&gt;checkout&lt;/code&gt;, &lt;code&gt;branch&lt;/code&gt;, &lt;code&gt;commit -am&lt;/code&gt; y &lt;code&gt;status&lt;/code&gt;. Básicamente los comandos que más uso.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;co&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; checkout
&lt;span class=&#34;nv&#34;&gt;br&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; branch
&lt;span class=&#34;nv&#34;&gt;cm&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; commit -am
&lt;span class=&#34;nv&#34;&gt;st&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Veamos ahora una serie de aliases que he extraido de &lt;a href=&#34;http://haacked.com/archive/2014/07/28/github-flow-aliases/&#34; target=&#34;_blank&#34; title=&#34;github Flow&#34;&gt;haacked&lt;/a&gt;:&lt;/p&gt;

&lt;h1 id=&#34;actualizar-el-directorio-de-trabajo&#34;&gt;Actualizar el directorio de trabajo&lt;/h1&gt;

&lt;p&gt;Para simplificar estos dos comandos&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;git pull --rebase --prune
git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;en los que el primero obtiene los cambios desde el servidor, si se tienen commits locales, se ponen al principio de los descargados (&lt;code&gt;rebase&lt;/code&gt;), y con &lt;code&gt;prune&lt;/code&gt; se eliminan ramas que ya no existan en el servidor. El segundo simplemente actualiza recursivamente submódulos. El  &lt;em&gt;alias&lt;/em&gt; quedará:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;up&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; !git pull --rebase --prune &lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Este &lt;em&gt;alias&lt;/em&gt; es algo distinto, la exclamación indica que se va a ejecutar un comando en la &lt;em&gt;shell&lt;/em&gt;, es decir, podemos ejecutar cualquier comando, no solo de git. En este caso, se están ejecutando dos comandos git.&lt;/p&gt;

&lt;h1 id=&#34;git-save-git-wip-git-undo-git-amend&#34;&gt;git save, git wip, git undo, git amend&lt;/h1&gt;

&lt;p&gt;Estos dos &lt;em&gt;alias&lt;/em&gt; están destinados a cuando simplemente queremos guardar nuestros cambios, ya sea porque tenemos que irnos a hacer otras cosas, o simplemente no hemos acabado el trabajo y aún no tenemos un nombre para el commit adecuado. Con ellos, se guardan los cambios con un mensaje de commit &lt;code&gt;SAVEPOINT&lt;/code&gt; o &lt;code&gt;WIP&lt;/code&gt;, en función del alias que os guste más:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;save&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; !git add -A &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span class=&#34;s1&#34;&gt;&amp;#39;SAVEPOINT&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;wip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; commit -am &lt;span class=&#34;s2&#34;&gt;&amp;quot;WIP&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Una vez volvamos a trabajar, simplemente ejecutamos el &lt;em&gt;alias&lt;/em&gt; &lt;code&gt;undo&lt;/code&gt;, que elimina el último commit, pero deja intactos los cambios:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;undo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; reset HEAD~1 --mixed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;O si simplemente queremos modificar el mensaje del commit, usamos el &lt;em&gt;alias&lt;/em&gt; &lt;code&gt;amend&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;amend&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; commit -a --amend
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;resetear-el-directorio-de-trabajo-adecuadamente-git-wipe&#34;&gt;Resetear el directorio de trabajo adecuadamente, git wipe&lt;/h1&gt;

&lt;p&gt;Cuantas veces hemos comenzado a trabajar o intentar añadir algo al código y al final lo único que hicimos fue ensuciar todo el directorio, montones de líneas de código sin ordenar etc. Lo mejor en estos casos es descartar todo y volver a empezar. Para ello es posible usar &lt;code&gt;git reset HEAD --hard&lt;/code&gt;, pero esto borrará todo, sin que quede constancia de lo que hicimos. Para descartar el código, pero que quede constancia de lo que hicimios, por si alguna vez nos hace falta, crearemos el &lt;em&gt;alias&lt;/em&gt; &lt;em&gt;wipe&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;wipe&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; !git add -A &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -qm &lt;span class=&#34;s1&#34;&gt;&amp;#39;WIPE SAVEPOINT&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git reset HEAD~1 --hard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Hace un commit de todo lo que hay en el directorio de trabajo para luego hacer un &lt;em&gt;hard reset&lt;/em&gt; y eliminar dicho commit. A pesar de ello, el commit seguirá ahí, en la historia del repositorio, aunque inalcanzable. Estos commits son un poco complejos de recuperar, pero al menos seguimos teniendo aquel trabajo del que no quedamos del todo convencidos. Quizá algún día recuerdes que necesitabas una línea de código que escribiste. Para recuperarlo hay que ejecutar &lt;code&gt;git reflog&lt;/code&gt; y buscar el SHA del commit que tenga como mensaje “WIPE SAVEPOINT”.&lt;/p&gt;

&lt;h1 id=&#34;alias-para-logs&#34;&gt;Alias para logs&lt;/h1&gt;

&lt;p&gt;Veamos ahora una serie de &lt;em&gt;alias&lt;/em&gt; para mostrar los logs de los commits de distintos modos.&lt;/p&gt;

&lt;h1 id=&#34;mostrar-commits-de-forma-compacta-y-colores-git-ls&#34;&gt;Mostrar commits de forma compacta y colores, git ls&lt;/h1&gt;

&lt;figure&gt;
&lt;a href=&#34;https://elbauldelprogramador.com/img/gitls.png&#34;&gt;&lt;img on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/gitls.png&#34; title=&#34;{{ page.title }}&#34; alt=&#34;{{ page.title }}&#34; width=&#34;666px&#34; height=&#34;504px&#34; /&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;El &lt;em&gt;alias&lt;/em&gt; es el siguiente:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ls&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; log --pretty&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;format:&lt;span class=&#34;s2&#34;&gt;&amp;quot;%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]&amp;quot;&lt;/span&gt; --decorate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;listar-commits-y-ficheros-modificados-git-ll&#34;&gt;Listar commits y ficheros modificados, git ll&lt;/h1&gt;

&lt;figure&gt;
&lt;a href=&#34;https://elbauldelprogramador.com/img/gitll.png&#34;&gt;&lt;img on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/gitll.png&#34; title=&#34;{{ page.title }}&#34; alt=&#34;{{ page.title }}&#34; width=&#34;603px&#34; height=&#34;498px&#34; /&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;El &lt;em&gt;alias&lt;/em&gt; es el siguiente:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ll&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; log --pretty&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;format:&lt;span class=&#34;s2&#34;&gt;&amp;quot;%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]&amp;quot;&lt;/span&gt; --decorate --numstat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;mostar-commits-de-forma-compacta-y-con-fechas-git-lds&#34;&gt;Mostar commits de forma compacta y con fechas, git lds&lt;/h1&gt;

&lt;figure&gt;
&lt;a href=&#34;https://elbauldelprogramador.com/img/gitlds.png&#34;&gt;&lt;img on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/gitlds.png&#34; title=&#34;{{ page.title }}&#34; alt=&#34;{{ page.title }}&#34; width=&#34;766px&#34; height=&#34;502px&#34; /&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; log --pretty&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;format:&lt;span class=&#34;s2&#34;&gt;&amp;quot;%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]&amp;quot;&lt;/span&gt; --decorate --date&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;short
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Si lo preferimos con fechas relativas, usaremos el &lt;em&gt;alias&lt;/em&gt; &lt;code&gt;git ld&lt;/code&gt;:&lt;/p&gt;

&lt;figure&gt;
&lt;a href=&#34;https://elbauldelprogramador.com/img/gitld.png&#34;&gt;&lt;img on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/gitld.png&#34; title=&#34;{{ page.title }}&#34; alt=&#34;{{ page.title }}&#34; width=&#34;785px&#34; height=&#34;498px&#34; /&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ld&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; log --pretty&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;format:&lt;span class=&#34;s2&#34;&gt;&amp;quot;%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]&amp;quot;&lt;/span&gt; --decorate --date&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;relative
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;buscar-ficheros-y-contenido-dentro-de-ficheros-grep&#34;&gt;Buscar ficheros y contenido dentro de ficheros (grep)&lt;/h1&gt;

&lt;p&gt;Para buscar ficheros con conteniendo el nombre indicado:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;!git ls-files | grep -i&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git f one

P3/oneway/Utils.py
P3/oneway/__init__.py
P3/oneway/ej1.py
P3/oneway/ej2.py
P3/oneway/ej3.py
P3/oneway/ej4.py
P3/oneway/ej5.py
P3/oneway/ej6.py
P3/oneway/ej7.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Para buscar contenido dentro de todo el repositorio:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;grep&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; grep -Ii
&lt;span class=&#34;nv&#34;&gt;gr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; grep -Ii
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git grep Rabin

P1/modularArith/ej4.py:def MillerRabin&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;p&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
P1/modularArith/ej4.py:    print MillerRabin&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;90221078753392184154149622269679731705920869572364323146777389106744249167893287091491005751893264013854756094230384816436985035887367570198390830836626929620930395458607390051335962764852769424941031051670131521265969408350800112779692655340042253991970492761524977413231930703094065023050574077317620529581736775256036443993928340221545607375549860405933153255776836414051570996984167934585339322850189347872718439350738428272565094611168867981011370318335242028953808721309056435214502065537377043&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Para buscar desde el directorio raíz:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gra&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;!f() { A=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &amp;amp;&amp;amp; TOPLEVEL=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;git rev-parse --show-toplevel&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &amp;amp;&amp;amp; cd &lt;/span&gt;$&lt;span class=&#34;s2&#34;&gt;TOPLEVEL &amp;amp;&amp;amp; git grep --full-name -In &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; | xargs -I{} echo &lt;/span&gt;$&lt;span class=&#34;s2&#34;&gt;TOPLEVEL/{} &amp;amp;&amp;amp; cd &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$A&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;; }; f&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;listar-todos-los-aliases-git-la&#34;&gt;Listar todos los aliases, git la&lt;/h1&gt;

&lt;p&gt;Ahora que ya llevamos unos cuantos &lt;em&gt;aliases&lt;/em&gt;, quizá sean dificil de recordar hasta que nos acostumbremos, por ello, podemos crear un &lt;em&gt;alias&lt;/em&gt; que liste todos los nuestros &lt;em&gt;aliases&lt;/em&gt; :-):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;la&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;!git config -l | grep alias | cut -c 7-&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;listar-la-última-etiqueta-git-lt&#34;&gt;Listar la última etiqueta, git lt&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;lasttag&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; describe --tags --abbrev&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0
&lt;span class=&#34;nv&#34;&gt;lt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; describe --tags --abbrev&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;alias-para-hacer-merges-git-ours-git-theirs&#34;&gt;Alias para hacer merges, git ours, git theirs&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;ours&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;!f() { git co --ours &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &amp;amp;&amp;amp; git add &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;; }; f&amp;quot;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;theirs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;!f() { git co --theirs &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &amp;amp;&amp;amp; git add &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;; }; f&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Eso es todo, comentad vuestras &lt;em&gt;alias&lt;/em&gt; para completar este artículo!&lt;/p&gt;

&lt;h1 id=&#34;recopilación&#34;&gt;Recopilación&lt;/h1&gt;

&lt;p&gt;Aquí se muestran todos los &lt;em&gt;alias&lt;/em&gt; vistos:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;alias&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;ec&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; config --global -e
  &lt;span class=&#34;nv&#34;&gt;co&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; checkout
  &lt;span class=&#34;nv&#34;&gt;br&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; branch
  &lt;span class=&#34;nv&#34;&gt;cm&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; commit -am
  &lt;span class=&#34;nv&#34;&gt;st&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; status
  &lt;span class=&#34;nv&#34;&gt;up&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; !git pull --rebase --prune &lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git submodule update --init --recursive
  &lt;span class=&#34;nv&#34;&gt;save&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; !git add -A &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -m &lt;span class=&#34;s1&#34;&gt;&amp;#39;SAVEPOINT&amp;#39;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;wip&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; commit -am &lt;span class=&#34;s2&#34;&gt;&amp;quot;WIP&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;undo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; reset HEAD~1 --mixed
  &lt;span class=&#34;nv&#34;&gt;amend&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; commit -a --amend
  &lt;span class=&#34;nv&#34;&gt;wipe&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; !git add -A &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit -qm &lt;span class=&#34;s1&#34;&gt;&amp;#39;WIPE SAVEPOINT&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git reset HEAD~1 --hard
  &lt;span class=&#34;nv&#34;&gt;ls&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; log --pretty&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;format:&lt;span class=&#34;s2&#34;&gt;&amp;quot;%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]&amp;quot;&lt;/span&gt; --decorate
  &lt;span class=&#34;nv&#34;&gt;ll&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; log --pretty&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;format:&lt;span class=&#34;s2&#34;&gt;&amp;quot;%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]&amp;quot;&lt;/span&gt; --decorate --numstat
  &lt;span class=&#34;nv&#34;&gt;lds&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; log --pretty&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;format:&lt;span class=&#34;s2&#34;&gt;&amp;quot;%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]&amp;quot;&lt;/span&gt; --decorate --date&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;short
  &lt;span class=&#34;nv&#34;&gt;ld&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; log --pretty&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;format:&lt;span class=&#34;s2&#34;&gt;&amp;quot;%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]&amp;quot;&lt;/span&gt; --decorate --date&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;relative
  &lt;span class=&#34;nv&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;!git ls-files | grep -i&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;grep&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; grep -Ii
  &lt;span class=&#34;nv&#34;&gt;gr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; grep -Ii
  &lt;span class=&#34;nv&#34;&gt;gra&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;!f() { A=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &amp;amp;&amp;amp; TOPLEVEL=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;git rev-parse --show-toplevel&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &amp;amp;&amp;amp; cd &lt;/span&gt;$&lt;span class=&#34;s2&#34;&gt;TOPLEVEL &amp;amp;&amp;amp; git grep --full-name -In &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; | xargs -I{}   echo &lt;/span&gt;$&lt;span class=&#34;s2&#34;&gt;TOPLEVEL/{} &amp;amp;&amp;amp; cd &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$A&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;; }; f&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;la&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;!git config -l | grep alias | cut -c 7-&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;lasttag&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; describe --tags --abbrev&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0
  &lt;span class=&#34;nv&#34;&gt;lt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; describe --tags --abbrev&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0
  &lt;span class=&#34;nv&#34;&gt;ours&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;!f() { git co --ours &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &amp;amp;&amp;amp; git add &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;; }; f&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;theirs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;!f() { git co --theirs &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &amp;amp;&amp;amp; git add &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;; }; f&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;referencias&#34;&gt;Referencias&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Github Flow Aliases | &lt;a href=&#34;http://haacked.com/archive/2014/07/28/github-flow-aliases/&#34; title=&#34;Github Flow Aliases&#34;&gt;haacked.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Must Have Git Aliases | &lt;a href=&#34;http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/&#34; title=&#34;Must Have Git Aliases: Advanced Examples&#34;&gt;durdn.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
    </channel>
</rss>
