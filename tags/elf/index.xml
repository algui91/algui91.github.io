<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Elf on El Baúl del programador</title>
        <link>https://elbauldelprogramador.com/tags/elf/index.xml</link>
        <description>Recent content in Elf on El Baúl del programador</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>es-ES</language>
        <image>
            <url>https://elbauldelprogramador.com/img/bio-photo-rss.png</url>
            <link>https://elbauldelprogramador.com/tags/elf/index.xml</link>
            <title>Elf on El Baúl del programador</title>
            <width>144</width>
            <height>144</height>
        </image>
        <atom:link href="https://elbauldelprogramador.com/tags/elf/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Jugando con las secciones .dtors y .ctors de la tabla de secciones en C</title>
            <link>https://elbauldelprogramador.com/jugando-con-la-seccion-dtors-de-la-tabla-de-secciones-en-c/</link>
            <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
            
            <guid>https://elbauldelprogramador.com/jugando-con-la-seccion-dtors-de-la-tabla-de-secciones-en-c/</guid>
            <description>&lt;p&gt;&lt;img on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://lh4.ggpht.com/_IlK2pNFFgGM/TROxbBd0LMI/AAAAAAAAAOA/YQiMnAyp4EQ/text-x-c%2B%2Bsrc.png&#34; class=&#34;alignleft&#34; /&gt;
Los que me leéis habitualmente probablemente hayais visto los artículos que escribí sobre &lt;a href=&#34;https://elbauldelprogramador.com/desafio-de-ingenieria-inversa-en-c-soluciones/&#34; title=&#34;Desafío de ingeniería inversa en C – Soluciones&#34;&gt;ingeniería inversa en C&lt;/a&gt;, o &lt;a href=&#34;https://elbauldelprogramador.com/explotacion-buffers-overflows-y-exploits-parte-i/&#34; title=&#34;Explotación – Buffers OverFlows y exploits (Parte I)&#34;&gt;explotación de buffers overflows&lt;/a&gt;. Son temas que me llaman la atención, hoy quiero hablaros de dos secciones de la tabla de secciones en C llamadas &lt;em&gt;.dtors&lt;/em&gt; y &lt;em&gt;.ctors&lt;/em&gt;, creada por los binarios compilados con el compilador de GNU.&lt;/p&gt;

&lt;p&gt;Estas secciones se crean para los &lt;a href=&#34;https://elbauldelprogramador.com/clases-y-objetos-el-destructor/&#34;&gt;destructores&lt;/a&gt; y &lt;a href=&#34;https://elbauldelprogramador.com/clases-y-objetos-el-constructor/&#34;&gt;constructores&lt;/a&gt;, respectivamente. Los constructores se llaman justo antes de ejecutar la función &lt;code&gt;main()&lt;/code&gt; y los destructores se llaman justo antes de que &lt;code&gt;main()&lt;/code&gt; finalize con la llamada al sistema &lt;code&gt;exit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Veamos un ejemplo para aclarar su funcionamiento:&lt;/p&gt;

&lt;p&gt;&lt;!--ad--&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;miConstructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__attribute__&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;miDestructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__attribute__&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;destructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
 &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;En main() &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;miConstructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;En el constructor&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;miDestructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;En el destructor&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;La salida de este programa será:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;En el constructor
En main&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
En el destructor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Al declarar &lt;code&gt;miConstructor&lt;/code&gt; como constructor la función se llama antes de ejecutar &lt;code&gt;main&lt;/code&gt;, lo mismo pasa para &lt;code&gt;miDescructor&lt;/code&gt;, pero en este caso se la llamará justo antes de salir de &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;La forma de controrlar la ejecución de ambas funciones es mediante las secciones &lt;em&gt;.dtors&lt;/em&gt; y &lt;em&gt;.ctors&lt;/em&gt;. Estas secciones son un array de direcciones de 32 bits que terminan con una dirección nula (la dirección 0x00000000). Así se determina donde empieza y donde acaba el array. Parecido a lo que hice en el artículo &lt;a href=&#34;https://elbauldelprogramador.com/ocultar-archivos-y-otras-imagenes-dentro-de-una-imagen/&#34; title=&#34;Ocultar archivos dentro de una imagen&#34;&gt;Ocultar archivos dentro de una imagen&lt;/a&gt; donde delimité el nombre del archivo por un pixel en blanco para saber que había llegado al final del nombre. De modo que entre el inicio de la sección &lt;em&gt;.dtors&lt;/em&gt; y &lt;em&gt;.ctors&lt;/em&gt; y la dirección nula se encuentran las funciones declaradas como destructores o constructores, respectivamente.&lt;/p&gt;

&lt;p&gt;Para localizar las funciones hay que usar el programa &lt;strong&gt;nm&lt;/strong&gt;, y &lt;strong&gt;objdump&lt;/strong&gt; para encontrar las dos secciones.&lt;/p&gt;

&lt;p&gt;Sin embargo, mientras escribía este artículo &lt;a href=&#34;http://stackoverflow.com/q/16569495/1612432&#34; title=&#34;Pregunta en stackoverflow&#34;&gt;me dí cuenta de que ya no existen dichas secciones&lt;/a&gt;, han sido reemplazadas por &lt;em&gt;.init_array/.fini_array&lt;/em&gt;. Del mismo modo pueden verse usando &lt;strong&gt;nm&lt;/strong&gt;, y &lt;strong&gt;objdump&lt;/strong&gt;. Empecemos con &lt;strong&gt;nm&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ nm dtors
080495f0 d _DYNAMIC
080496e4 d _GLOBAL_OFFSET_TABLE_
080484dc R _IO_stdin_used
         w _ITM_deregisterTMCloneTable
         w _ITM_registerTMCloneTable
         w _Jv_RegisterClasses
080485d8 r __FRAME_END__
080495ec d __JCR_END__
080495ec d __JCR_LIST__
&lt;span class=&#34;m&#34;&gt;08049704&lt;/span&gt; D __TMC_END__
&lt;span class=&#34;m&#34;&gt;08049704&lt;/span&gt; A __bss_start
080496fc D __data_start
080483c0 t __do_global_dtors_aux
080495e4 t __do_global_dtors_aux_fini_array_entry
&lt;span class=&#34;m&#34;&gt;08049700&lt;/span&gt; D __dso_handle
080495dc t __frame_dummy_init_array_entry
         w __gmon_start__
080484ba T __i686.get_pc_thunk.bx
080495e4 t __init_array_end
080495dc t __init_array_start
&lt;span class=&#34;m&#34;&gt;08048450&lt;/span&gt; T __libc_csu_fini
&lt;span class=&#34;m&#34;&gt;08048460&lt;/span&gt; T __libc_csu_init
         U __libc_start_main@@GLIBC_2.0
&lt;span class=&#34;m&#34;&gt;08049704&lt;/span&gt; A _edata
&lt;span class=&#34;m&#34;&gt;08049708&lt;/span&gt; A _end
080484c0 T _fini
080484d8 R _fp_hw
080482b8 T _init
&lt;span class=&#34;m&#34;&gt;08048320&lt;/span&gt; T _start
&lt;span class=&#34;m&#34;&gt;08049704&lt;/span&gt; b completed.5730
080496fc W data_start
&lt;span class=&#34;m&#34;&gt;08048350&lt;/span&gt; t deregister_tm_clones
080483e0 t frame_dummy
0804840c T main
&lt;span class=&#34;m&#34;&gt;08048428&lt;/span&gt; t miConstructor
0804843c t miDestructor
         U puts@@GLIBC_2.0
&lt;span class=&#34;m&#34;&gt;08048380&lt;/span&gt; t register_tm_clones
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;En la salida se muestran como &lt;em&gt;_init&lt;/em&gt; y &lt;em&gt;_fini&lt;/em&gt;. También es posible obtener más información sobre las secciones de la tabla con &lt;strong&gt;objdumb&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ objdump -h ./dtors

./dtors:     file format elf32-i386

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; .interp       &lt;span class=&#34;m&#34;&gt;00000013&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;08048134&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;08048134&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00000134&lt;/span&gt;  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; .note.ABI-tag &lt;span class=&#34;m&#34;&gt;00000020&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;08048148&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;08048148&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00000148&lt;/span&gt;  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; .note.gnu.build-id &lt;span class=&#34;m&#34;&gt;00000024&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;08048168&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;08048168&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00000168&lt;/span&gt;  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; .hash         &lt;span class=&#34;m&#34;&gt;00000028&lt;/span&gt;  0804818c  0804818c  0000018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; .gnu.hash     &lt;span class=&#34;m&#34;&gt;00000020&lt;/span&gt;  080481b4  080481b4  000001b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; .dynsym       &lt;span class=&#34;m&#34;&gt;00000050&lt;/span&gt;  080481d4  080481d4  000001d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; .dynstr       0000004a  &lt;span class=&#34;m&#34;&gt;08048224&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;08048224&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00000224&lt;/span&gt;  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; .gnu.version  0000000a  0804826e  0804826e  0000026e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; .gnu.version_r &lt;span class=&#34;m&#34;&gt;00000020&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;08048278&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;08048278&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00000278&lt;/span&gt;  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; .rel.dyn      &lt;span class=&#34;m&#34;&gt;00000008&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;08048298&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;08048298&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00000298&lt;/span&gt;  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; .rel.plt      &lt;span class=&#34;m&#34;&gt;00000018&lt;/span&gt;  080482a0  080482a0  000002a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 &lt;span class=&#34;m&#34;&gt;11&lt;/span&gt; .init         &lt;span class=&#34;m&#34;&gt;00000026&lt;/span&gt;  080482b8  080482b8  000002b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt; .plt          &lt;span class=&#34;m&#34;&gt;00000040&lt;/span&gt;  080482e0  080482e0  000002e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; .text         000001a0  &lt;span class=&#34;m&#34;&gt;08048320&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;08048320&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00000320&lt;/span&gt;  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 &lt;span class=&#34;m&#34;&gt;14&lt;/span&gt; .fini         &lt;span class=&#34;m&#34;&gt;00000017&lt;/span&gt;  080484c0  080484c0  000004c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt; .rodata       &lt;span class=&#34;m&#34;&gt;00000036&lt;/span&gt;  080484d8  080484d8  000004d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 &lt;span class=&#34;m&#34;&gt;16&lt;/span&gt; .eh_frame_hdr 0000002c  &lt;span class=&#34;m&#34;&gt;08048510&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;08048510&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00000510&lt;/span&gt;  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 &lt;span class=&#34;m&#34;&gt;17&lt;/span&gt; .eh_frame     000000a0  0804853c  0804853c  0000053c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 &lt;span class=&#34;m&#34;&gt;18&lt;/span&gt; .init_array   &lt;span class=&#34;m&#34;&gt;00000008&lt;/span&gt;  080495dc  080495dc  000005dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 &lt;span class=&#34;m&#34;&gt;19&lt;/span&gt; .fini_array   &lt;span class=&#34;m&#34;&gt;00000008&lt;/span&gt;  080495e4  080495e4  000005e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; .jcr          &lt;span class=&#34;m&#34;&gt;00000004&lt;/span&gt;  080495ec  080495ec  000005ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 &lt;span class=&#34;m&#34;&gt;21&lt;/span&gt; .dynamic      000000f0  080495f0  080495f0  000005f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 &lt;span class=&#34;m&#34;&gt;22&lt;/span&gt; .got          &lt;span class=&#34;m&#34;&gt;00000004&lt;/span&gt;  080496e0  080496e0  000006e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 &lt;span class=&#34;m&#34;&gt;23&lt;/span&gt; .got.plt      &lt;span class=&#34;m&#34;&gt;00000018&lt;/span&gt;  080496e4  080496e4  000006e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; .data         &lt;span class=&#34;m&#34;&gt;00000008&lt;/span&gt;  080496fc  080496fc  000006fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 &lt;span class=&#34;m&#34;&gt;25&lt;/span&gt; .bss          &lt;span class=&#34;m&#34;&gt;00000004&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;08049704&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;08049704&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00000704&lt;/span&gt;  2**2
                  ALLOC
 &lt;span class=&#34;m&#34;&gt;26&lt;/span&gt; .comment      &lt;span class=&#34;m&#34;&gt;00000038&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00000000&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00000000&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;00000704&lt;/span&gt;  2**0
                  CONTENTS, READONLY
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;El contenido que nos interesa es:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;18&lt;/span&gt; .init_array   &lt;span class=&#34;m&#34;&gt;00000008&lt;/span&gt;  080495dc  080495dc  000005dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 &lt;span class=&#34;m&#34;&gt;19&lt;/span&gt; .fini_array   &lt;span class=&#34;m&#34;&gt;00000008&lt;/span&gt;  080495e4  080495e4  000005e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Esta vez hemos obtenido más información, sabemos que ambas secciones ocupan 8 Bytes y se puede escribir en ellas, ya que no tienen la etiqueta READONLY. Para examinar el contenido basta con ejecutar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;objdump&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fini_array&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dtors&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Contents&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;fini_array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;80495e4&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c0830408&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c840408&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;La primera dirección apunta a la tabla de desplazamiento global (_GLOBAL_OFFSET_TABLE_) y la segunda a __do_global_dtors_aux.
La última dirección (3c840408) corresponde con la dirección de la función &lt;code&gt;miDestructor&lt;/code&gt;, pero en little-endian (0804843c). Al poder modificar dicha tabla, sería posible tomar el control del programa explotando alguna vulnerabilidad y obtener una shell con permisos de root. El propósito inicial del artículo era mostar cómo explotar dicha vulnerabilidad, pero al no existir la sección .ctors y .dtors no va a ser posible, ya que he estado trasteando un poco con estas secciones nuevas y no he conseguido nada.&lt;/p&gt;

&lt;p&gt;Aún así, espero que os haya resultado útil para aprender sobre los constructores y destructores en C, y hayáis conocido un poco más a fondo la estructura de un ejecutable.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.exploit-db.com/papers/13234/&#34;&gt;http://www.exploit-db.com/papers/13234/&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;referencias&#34;&gt;Referencias&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Replace .ctors/.dtors with .init_array/.fini_array&lt;/em&gt; »» &lt;a href=&#34;http://gcc.gnu.org/bugzilla/show_bug.cgi?id=46770&#34; target=&#34;_blank&#34;&gt;gcc.gnu.org&lt;/a&gt;
&lt;em&gt;Abusing .CTORS and .DTORS For FUN and PROFIT&lt;/em&gt; »» &lt;a href=&#34;http://www.exploit-db.com/papers/13234/&#34; target=&#34;_blank&#34;&gt;exploit-db.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/stdlib.h&gt;&lt;/stdio.h&gt;&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
