<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Colaboraciones on El Baúl del programador</title>
        <link>https://elbauldelprogramador.com/author/colaboraciones/</link>
        <description>Recent content in Colaboraciones on El Baúl del programador</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>es-ES</language>
        <lastBuildDate>Wed, 09 Aug 2017 17:45:16 +0200</lastBuildDate>
        <image>
            <url>https://elbauldelprogramador.com/img/bio-photo-rss.png</url>
            <link>https://elbauldelprogramador.com/author/colaboraciones/</link>
            <title>Colaboraciones on El Baúl del programador</title>
            <width>144</width>
            <height>144</height>
        </image>
        <atom:link href="https://elbauldelprogramador.com/author/colaboraciones/" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Mantén tu proyecto de LaTeX limpio con este simple script</title>
            <link>https://elbauldelprogramador.com/mantener-proyecto-latex-limpio-script/</link>
            <pubDate>Wed, 09 Aug 2017 17:45:16 +0200</pubDate>
            
            <guid>https://elbauldelprogramador.com/mantener-proyecto-latex-limpio-script/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;Este artículo es una colaboración de &lt;a href=&#34;http://Github.com/lulivi&#34; target=&#34;_blank&#34; title=&#34;Luis Liñan&#34;&gt;Luis Liñan&lt;/a&gt;, &lt;a href=&#34;https://t.me/lulivi&#34; target=&#34;_blank&#34; title=&#34;@lulivi&#34;&gt;@lulivi&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;En esta entrada del blog utilizaremos un script simple que nos permitirá actualizar automáticamente nuestro documento pdf (a partir del fichero tex) y devolverlo al directorio de trabajo manteniendolo totalmente limpio.&lt;/p&gt;

&lt;h1 id=&#34;estructura-del-directorio&#34;&gt;Estructura del directorio&lt;/h1&gt;

&lt;p&gt;Siguiendo la estructura ya comentada en &lt;a href=&#34;https://elbauldelprogramador.com/ocultar-los-metaficheros-de-latex-del-directorio-de-trabajo/&#34;&gt;otro artículo del blog&lt;/a&gt; tendremos lo siguiente en nuestro directorio de trabajo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- figures
|   |-- figure_1.pdf
|   `-- ...
|-- main.pdf
|-- main.tex
|-- ref.bib
|-- style.sty
`-- metafiles
    |-- main.aux
    |-- main.bbl
    |-- main.blg
    |-- main.fdb_latexmk
    |-- main.fls
    |-- main.lof
    |-- main.log
    |-- main.lot
    |-- main.out
    |-- main.pdf
    `-- main.toc
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;ejecución-del-script&#34;&gt;Ejecución del script&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Help function&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;help&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &amp;lt;metafiles_directory&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Check correct execution of the script&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt; -ne &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;help&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; 1
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Create directory if it doesn&amp;#39;t exist&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; ! -d &lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
  mkdir &lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Copy the pdf from the temporal directory to the parent directory&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; listen_pdf_update &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;pdf_substring&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;(.*[.]pdf.*)&amp;#39;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; true&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;change&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;inotifywait -e close_write &lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$c&lt;/span&gt;hange &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;~ $pdf_substring &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
      cp &lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;/*.pdf ./
      &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;============&amp;gt; iNotify &amp;lt;============&amp;quot;&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;==&amp;gt;   Updated parent pdf file   &amp;lt;==&amp;quot;&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;===================================&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Set up listener for the target PDF file&lt;/span&gt;
listen_pdf_update &lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Set up latex listener for changes in the directory&lt;/span&gt;
latexmk -shell-escape -silent -bibtex -view&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;pdf -xelatex -pdf -pvc -output-directory&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Kill all processes created in this script&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;kill&lt;/span&gt; -9 -&lt;span class=&#34;nv&#34;&gt;$$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;!--ad--&gt;&lt;/p&gt;

&lt;p&gt;Lo único que hay que hacer es ejecutar el script desde el directorio de trabajo pasando como argumento el directorio donde irán los outputs de la compilación:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ /PATH/TO/SCRIPT/updatePdfLatex.sh &amp;lt;metafiles_directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Para más información sobre el script, vea el &lt;a href=&#34;https://github.com/lulivi/Latex-PDF-auto-updater&#34;&gt;repositorio del script&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;referencias&#34;&gt;Referencias&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://elbauldelprogramador.com/compilar-automaticamente-ficheros-en-latex-mientras-los-modificamos&#34; target=&#34;_blank&#34; title=&#34;Compilar automáticamente ficheros en latex mientras los modificamos&#34;&gt;Compilar automáticamente ficheros en latex mientras los modificamos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://elbauldelprogramador.com/ejecutar-un-script-al-modificar-un-fichero-con-inotify&#34; target=&#34;_blank&#34; title=&#34;Ejecutar un script al modificar un fichero con inotify&#34;&gt;Ejecutar un script al modificar un fichero con inotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mankier.com/1/latexmk&#34; target=&#34;_blank&#34; title=&#34;Latexmk man page&#34;&gt;Latexmk man page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
        <item>
            <title>TAILS LINUX y la importancia de la privacidad</title>
            <link>https://elbauldelprogramador.com/tails-linux-importancia-privacidad/</link>
            <pubDate>Fri, 27 Jan 2017 00:00:00 +0000</pubDate>
            
            <guid>https://elbauldelprogramador.com/tails-linux-importancia-privacidad/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;Este artículo es una colaboración de &lt;em&gt;Paula de la Hoz (&lt;a href=&#34;https://twitter.com/Terceranexus6&#34;&gt;@Terceranexus6&lt;/a&gt;&lt;/em&gt;. Su blog: &lt;a href=&#34;https://ohmybits.tumblr.com&#34;&gt;Oh My Bits&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://medium.com/@HamletAgain&#34;&gt;Hamlet Again&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;contexto-actual&#34;&gt;Contexto actual&lt;/h1&gt;

&lt;p&gt;Con el incipiente avance tecnológico, en nuestra sociedad cada vez se valora más la privacidad del usuario. Todo lo que hacemos, quiénes somos, qué nos gusta, es información que nos puede parecer irrelevante según para qué contextos. Sin embargo para las empresas, gobiernos y asociaciones, esa información es muy valiosa y puede incluso llegar a &lt;em&gt;limitarnos&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;&lt;em&gt;Decir que no te importa el derecho a la privacidad porque no tienes nada que esconder no se diferencia de decir que no te importa la libertad de expresión porque no tienes nada que decir.&lt;/em&gt;&amp;ldquo;
&amp;mdash; &lt;strong&gt;Edward Snowden&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;!--ad--&gt;&lt;/p&gt;

&lt;p&gt;El ex-empleado de la NSA &lt;strong&gt;&lt;em&gt;Edward Snowden&lt;/em&gt;&lt;/strong&gt;, conocido por su implicación en wikileaks con filtraciones de información clasificada, ha abogado por la defensa de la privacidad y los derechos en internet a través de las redes, incluso desde su asilo político en Rusia. Esta controvertida figura, para mantener &amp;ldquo;&lt;em&gt;a salvo&lt;/em&gt;&amp;rdquo; su privacidad utiliza, principalmente, un sistema operativo llamado &lt;strong&gt;TAILS LINUX&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&#34;qué-es-tails&#34;&gt;¿Qué es Tails?&lt;/h1&gt;

&lt;figure&gt;
    &lt;img sizes=&#34;(min-width: 500px) 500px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/tchou-improved.png&#34; alt=&#34;TAILS LINUX y la importancia de la privacidad&#34; title=&#34;TAILS LINUX y la importancia de la privacidad&#34; width=&#34;500&#34; height=&#34;257&#34;&gt;&lt;/img&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://tails.boum.org/index.en.html&#34;&gt;TAILS&lt;/a&gt; es un sistema operativo &lt;em&gt;live&lt;/em&gt;, ¿ésto qué quiere decir? que podemos utilizarlo desde cualquier ordenador utilizando simplemente un pen drive. Es completamente gratuito, libre y está basado en Debian &lt;a href=&#34;https://elbauldelprogramador.com/categories/linux&#34; title=&#34;Artículos sobre Linux&#34;&gt;GNU/Linux&lt;/a&gt;. Una de las características principales de TAILS, es que basa todas sus conexiones en &lt;strong&gt;TOR&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://elbauldelprogramador.com/tags/tor&#34;&gt;TOR&lt;/a&gt; es un navegador que protege al usuario frente al análisis del tráfico de paquetes y la vigilancia masiva usando un sistema alternativo de nodos voluntarios y túneles virtuales, en lugar de hacer una conexión directa.&lt;/p&gt;

&lt;p&gt;Además de &lt;a href=&#34;https://elbauldelprogramador.com/tags/tor&#34;&gt;TOR&lt;/a&gt;, TAILS permite utilizar I2P, y en la web oficial viene &lt;a href=&#34;https://tails.boum.org/doc/anonymous_internet/i2p/index.en.html&#34;&gt;documentado&lt;/a&gt; cómo utilizarlo. El sistema operativo, que ocupa en su totalidad &lt;em&gt;4 gigas&lt;/em&gt;, viene con una serie de programas predeterminados relacionados con la privacidad, la ofimática y la mensajería. En un principio, el pen drive no guarda la información de una sesión a otra, pero &lt;a href=&#34;https://tails.boum.org/install/clone/index.en.html&#34;&gt;podemos configurarlo&lt;/a&gt; para utilizar la memoria sobrante del pen drive.&lt;/p&gt;

&lt;h1 id=&#34;instalación-y-uso&#34;&gt;Instalación y uso&lt;/h1&gt;

&lt;p&gt;Configurar un pen drive para instalar TAILS es bastante sencillo, especialmente porque &lt;a href=&#34;https://tails.boum.org/install/os/index.en.html&#34;&gt;viene indicado paso a paso&lt;/a&gt; en la página oficial. Además incluye especificaciones de instalación desde cualquier sistema operativo (Linux, Windows, MAC y otro TAILS). El proceso es básicamente bajarse la imagen desde TOR, preparar un pen drive de 4 o más gigas, e instalar la imagen en éste.&lt;/p&gt;

&lt;figure&gt;
    &lt;img  sizes=&#34;(min-width: 800px) 800px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/pasted-from-clipboard.png&#34; alt=&#34;TAILS LINUX y la importancia de la privacidad&#34; title=&#34;TAILS LINUX y la importancia de la privacidad&#34; width=&#34;946&#34; height=&#34;316&#34;&gt;&lt;/img&gt;
&lt;/figure&gt;

&lt;p&gt;Para usar este sistema operativo, simplemente insertamos el pen drive en uno de los puertos de un ordenador apagado y lo encendemos. El ordenador tardará varios segundos en terminar de cargar la imagen, pero cuando lo haga tendremos acceso a nuestro escritorio desde el cual podremos navegar con tranquilidad. Una vez que apagamos el ordenador y retiramos el pen drive, &lt;strong&gt;no queda rastro&lt;/strong&gt; de lo que hayamos hecho en el ordenador, ya que se sobrescribe la memoria.&lt;/p&gt;

&lt;p&gt;Por muy seguro que pueda ser este sistema operativo y las herramientas que ofrece, en la propia página web indica que la mejor forma de protegerse es el &lt;em&gt;sentido común&lt;/em&gt; del usuario, tales como utilizar contraseñas fuertes y saber utilizar apropiadamente las herramientas que ofrece, comprendiendo las limitaciones.&lt;/p&gt;

&lt;h1 id=&#34;programas-y-recursos&#34;&gt;Programas y recursos&lt;/h1&gt;

&lt;p&gt;Algunas de las herramientas más interesantes con las que viene Tails son las siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://guardianproject.info/code/luks/&#34;&gt;LUKS&lt;/a&gt; (Linux Unified Key Setup), que te permite encriptar pen drives y discos externos.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.eff.org/https-everywhere&#34;&gt;HTTPS Everywhere&lt;/a&gt; es una extensión desarrollada por la &lt;a href=&#34;eff.org&#34;&gt;EFF&lt;/a&gt; para encriptar todas las conexiones usando https.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openpgp.org/&#34;&gt;OpenPGP&lt;/a&gt; &lt;a href=&#34;https://elbauldelprogramador.com/editar-y-crear-archivos-cifrados-con-gpg-en-vim/&#34; title=&#34;Editar y crear archivos cifrados con GPG en Vim&#34;&gt;para encriptar y firmar documentos y correos&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://otr.cypherpunks.ca/&#34;&gt;OTR&lt;/a&gt;, para proteger mensajería instantánea.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wipetools.tuxfamily.org/nautilus-wipe.html&#34;&gt;Nautilus Wipe&lt;/a&gt; para borrar archivos con seguridad.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;confías-plenamente-en-tails-ellos-esperan-que-no&#34;&gt;¿Confías plenamente en TAILS? ellos esperan que no&lt;/h1&gt;

&lt;p&gt;Una de los problemas fundamentales de la sociedad actual en términos de informática es el desinterés del usuario medio por su privacidad y seguridad. Y esta concienciación empieza precisamente con la duda. Sean cuales sean nuestros motivos para confiar en un sistema operativo, programa o aplicación, deben haber pasado un filtro de duda y escepticismo, y eso mismo &lt;a href=&#34;https://tails.boum.org/doc/about/trust/index.en.html&#34;&gt;nos sugieren&lt;/a&gt; en la página de TAILS.&lt;/p&gt;

&lt;p&gt;Las herramientas que ofrecen no sólo tienen un objetivo técnico si no que se esfuerzan en ofrecerte una nueva visión y un cambio en la forma en que sus usuarios usan la tecnología y su información. El uso de este sistema debe ir acompasando al interés por nuestra privacidad, y a la curiosidad por saber qué se hace con nuestra información.&lt;/p&gt;

&lt;p&gt;Para ello ofrecen una serie de razones por las cuales puede decirse que abogan por estas cualidades. Basa su justificación en el uso de software libre bien documentado, TOR, y el hecho de utilizar Debian GNU/Linux, que aunque ha tenido bugs importantes como &lt;a href=&#34;https://lists.debian.org/debian-security-announce/2008/msg00152.html&#34;&gt;SSH PRNG&lt;/a&gt; no se han encontrado vulnerabilidades de seguridad hasta la fecha, lo que lo convierte en un buen candidato para este sistema.&lt;/p&gt;

&lt;h1 id=&#34;rompiendo-barreras&#34;&gt;Rompiendo barreras&lt;/h1&gt;

&lt;p&gt;Es de saber que las distintas distribuciones de linux tienen cierta fama entre los programadores e informáticos de todo el mundo. Debido a la amplia oferta de sistemas operativos disponibles, hay algunas más o menos amigables para un usuario medio. TAILS pretende ser accesible y manejable para cualquiera, tenga o no una base sólida en el uso de programación, linux y Bash. Para ello ofrece una interfaz gráfica intuitiva y una instalación simple.&lt;/p&gt;

&lt;p&gt;El uso de este sistema puede tener muchas aplicaciones en nuestro día a día, y es completamente legal. No necesitamos ser Edward Snowden para &lt;strong&gt;necesitar o querer&lt;/strong&gt; privacidad, por ejemplo, a la hora de consultar nuestro correo en un ordenador público. La idea de este sistema es liberarnos de la obligación de &amp;ldquo;&lt;em&gt;confiar&lt;/em&gt;&amp;rdquo; en un ordenador público, o de algún amigo.&lt;/p&gt;

&lt;p&gt;Esta idea puede que nos resulte difícil de agregar a nuestra rutina, pero sin duda se debería hacerse una pequeña reflexión sobre ello. El ritmo de nuestra sociedad ha cambiado con rapidez en pocos años, y dependemos en nuestra vida privada y trabajo (con frecuencia) de programas y aplicaciones que manejan gran cantidad de información privada. Esta rapidez ha hecho que el usuario medio se acostumbre a la comodidad de estas herramientas, pero se olvide con frecuencia de proteger sus datos a la hora de utilizarla, muchas veces por la gran cantidad de trabas y dificultades para ello.&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>Cómo crear un Front Controller en PHP</title>
            <link>https://elbauldelprogramador.com/como-crear-un-front-controller-en-php/</link>
            <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
            
            <guid>https://elbauldelprogramador.com/como-crear-un-front-controller-en-php/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;Éste artículo es una colaboración de &lt;a href=&#34;http://programarivm.com&#34;&gt;Jordi Bassagañas&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;La semana pasada, &lt;strong&gt;en el &lt;a href=&#34;http://programarivm.com/2014/10/felicidades-ya-terminamos-la-programacion-de-la-agenda-csv-con-php/&#34; title=&#34;Curso de Programación PHP guay&#34;&gt;Curso de Programación PHP guay&lt;/a&gt;, desarrollamos una agenda PHP basada en archivos CSV&lt;/strong&gt;. El ejercicio era tan sencillo que no utilizamos ningún &lt;a href=&#34;https://elbauldelprogramador.com/los-10-mejores-frameworks-gratis-de-aplicaciones-web/&#34; title=&#34;Los 11 Mejores Frameworks gratuitos para Aplicaciones Web&#34;&gt;framework&lt;/a&gt; de desarrollo de aplicaciones como por ejemplo Symfony, Laravel o Yii, pero sí que aplicamos algunas ideas de análisis para afrontar nuestro desarrollo con garantías de éxito.&lt;/p&gt;

&lt;figure&gt;
          &lt;img
            on=&#34;tap:lightbox1&#34;
            role=&#34;button&#34;
            tabindex=&#34;0&#34;
            layout=&#34;responsive&#34;
            src=&#34;https://img.youtube.com/vi/eYoDqz29qSA/0.jpg&#34;
            alt=&#34;Como crear un frontcontroller PHP&#34;
            title=&#34;Como crear un frontcontroller PHP&#34;
            sizes=&#34;(min-width: 480px) 480px, 100vw&#34;
            width=&#34;480&#34;
            height=&#34;360&#34;&gt;
          &lt;/img&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;!--ad--&gt;&lt;/p&gt;

&lt;p&gt;Seguro que a algunos os habrá gustado esta decisión porque pensáis que &lt;strong&gt;a veces es mejor no usar ningún framework&lt;/strong&gt;, sobre todo cuando la aplicación es muy sencilla (en los años recientes este ha venido siendo un argumento muy habitual), aunque con la llegada de los micro frameworks como &lt;a href=&#34;http://www.slimframework.com/&#34; title=&#34;Slim Framework&#34;&gt;Slim&lt;/a&gt; más de uno comenzará a plantearse esta cuestión, ¿verdad?&lt;/p&gt;

&lt;p&gt;En todo caso, nosotros levantamos nuestra app desde cero con estas ideas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Definimos la estructura de carpetas &lt;strong&gt;pensando en CRUD&lt;/strong&gt;, de acuerdo a los objetos que tenemos que gestionar, y a las operaciones que se llevan a cabo sobre dichos objetos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Separamos la lógica&lt;/strong&gt; PHP de la lógica de presentación (HTML, CSS y JS).&lt;/li&gt;
&lt;li&gt;Implementamos el patrón de diseño &lt;strong&gt;Singleton&lt;/strong&gt; en la clase &lt;code&gt;People&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Por cierto, te recuerdo que el código de &lt;code&gt;AgendaPHPGuay&lt;/code&gt; está disponible &lt;a href=&#34;https://github.com/programarivm/phpguay/tree/master/agenda&#34; title=&#34;AgendaPHPGuay disponible en GitHub&#34;&gt;en este repositorio de GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finalmente &lt;strong&gt;propusimos a los alumnos que mejoraran la seguridad de &lt;code&gt;AgendaPHPGuay&lt;/code&gt; implementando el patrón de diseño de software &lt;a href=&#34;http://en.wikipedia.org/wiki/Front_Controller_pattern&#34; title=&#34;Front Controller&#34;&gt;Front Controller&lt;/a&gt;&lt;/strong&gt;. Y los que teníais un nivel de programación intermedio comentabais que esta propuesta empezaba a complicarse bastante. Pues bien amig@s, que no cunda el pánico, hoy voy a explicar qué pasos hay que seguir exactamente para poner un Front Controller en la app.&lt;/p&gt;

&lt;h1 id=&#34;qué-es-front-controller&#34;&gt;¿Qué es Front Controller?&lt;/h1&gt;

&lt;p&gt;Front Controller es un patrón de diseño de software muy utilizado en aplicaciones web que consiste en &lt;strong&gt;definir un único punto de acceso para todas las peticiones HTTP&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A diferencia de las aplicaciones web clásicas, por así decir, donde el usuario podía ejecutar directamente cualquier script referenciándolo directamente en la barra de direcciones de su navegador, &lt;strong&gt;con Front Controller solo se accede a un punto central único: el famoso archivo index.php&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;El resto de archivos permanece inaccesible a los usuarios, a excepción de los assets, por supuesto, es decir, las imágenes, los archivos CSS y los archivos JavaScript.&lt;/p&gt;

&lt;p&gt;Front Controller aporta por tanto una capa de seguridad, y mejora también el mantenimiento de la aplicación porque permite definir en un solo punto toda aquella lógica que de otro modo estaría esparcida en varios archivos diferentes. Esta es la lógica de inicialización o arranque de la app (bootstrap logic).&lt;/p&gt;

&lt;h1 id=&#34;cómo-se-implementa-front-controller&#34;&gt;¿Cómo se implementa Front Controller?&lt;/h1&gt;

&lt;p&gt;Implementar Front Controller es sencillo. Por un lado, primero &lt;strong&gt;tenemos que crear una carpeta llamada &lt;code&gt;public&lt;/code&gt; en la carpeta raíz de nuestra aplicación&lt;/strong&gt;. Aquí ponemos los archivos que pueden ver los usuarios de Internet, por así decirlo. O dicho de otra forma, los archivos que están en &lt;code&gt;public&lt;/code&gt; son los únicos accesibles por los usuarios desde su navegador web. Estos archivos son los assets y el mismo &lt;code&gt;index.php&lt;/code&gt;. A modo de ejemplo &lt;strong&gt;puedes echar un vistazo a &lt;a href=&#34;http://www.slimframework.com/news/how-to-organize-a-large-slim-framework-application&#34; title=&#34;Estructura de directorios de una app MVC&#34;&gt;esta estructura de directorios&lt;/a&gt; recomendada por Slim&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Luego, por otro lado, tienes que asegurarte que &lt;strong&gt;tu servidor web canaliza todas las peticiones hacia tu archivo &lt;code&gt;index.php&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;En Apache:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;RewriteEngine On
RewriteCond %&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;REQUEST_FILENAME&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; !-f
RewriteRule ^ index.php &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;QSA,L&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;En &lt;a href=&#34;https://elbauldelprogramador.com/instalacion-optimizacion-servidor-web-nginx-i/&#34; title=&#34;Instalación y optimización de un servidor web con Nginx (I)&#34;&gt;nginx&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;location / &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
   try_files   $uri $uri/ /index.php&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;¡Y esto es todo por hoy amig@s! Espero que esta entrada os haya gustado y que entendáis bien las mejoras que aporta el uso de Front Controller (seguridad y escalabilidad). Ahora solo falta adaptar el código de &lt;code&gt;AgendaPHPGuay&lt;/code&gt; para que funcione con esta nueva característica, pero como nosotr@s aplicamos ideas de análisis y diseño de apps desde el principio, ya veréis que será muy sencillo.&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>Programación ABAP: Hola Mundo en Reports</title>
            <link>https://elbauldelprogramador.com/programacion-abap-hola-mundo-en-reports/</link>
            <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
            
            <guid>https://elbauldelprogramador.com/programacion-abap-hola-mundo-en-reports/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;Éste artículo es una colaboración de &lt;a href=&#34;http://www.blogdesap.com/&#34; title=&#34;Blog de SAP&#34; target=&#34;_blank&#34;&gt;Óscar Arranz&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Para iniciarnos en la programación ABAP nada mejor que el clásico “Hola mundo”. Con este tutorial podremos crear nuestro primer programa ABAP y, a su vez, ir viendo paso a paso algunos fundamentos básicos de programación de este lenguaje.&lt;/p&gt;

&lt;p&gt;&lt;!--ad--&gt;&lt;/p&gt;

&lt;h1 id=&#34;crear-nuestro-programa-abap&#34;&gt;CREAR NUESTRO PROGRAMA ABAP&lt;/h1&gt;

&lt;p&gt;Después de acceder a nuestro entorno SAP ECC vamos a la transacción &lt;strong&gt;SE38&lt;/strong&gt; para escribir el nombre de nuestro programa. Todo programa en ABAP tendrá que empezar siempre por la letra Z o Y ya que el resto de letras están reservadas para los programas propietarios SAP.&lt;/p&gt;

&lt;p&gt;Al pulsar el botón &lt;strong&gt;Crear&lt;/strong&gt; lo básico que SAP no solicita es:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Título&lt;/strong&gt;: la descripción de nuestro programa que aparecerá cuando ejecutemos nuestro programa.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tipo&lt;/strong&gt;: nuestro programa es ejecutable de por sí. Así que lo categorizamos como programa ejecutable.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Status&lt;/strong&gt;: este programa es sólo una prueba así que le daremos el status de programa de test.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Aplicación&lt;/strong&gt;: describe, dentro de los módulos disponibles de SAP, en qué categoría se puede introducir. Por ejemplo, puede estar asociado al módulo de compras, al de ventas, etc. Al ser un programa de test no lo asignaremos a ninguna aplicación.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
    &lt;img sizes=&#34;(min-width: 689px) 689px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/2014/04/hola-mundo-crear.png&#34; alt=&#34;Crear Hola Mundo ABAP&#34; width=&#34;689px&#34; height=&#34;646px&#34; /&gt;
&lt;/figure&gt;

&lt;p&gt;Al pulsar el botón &lt;strong&gt;Grabar&lt;/strong&gt; SAP nos devuelve a otra pantalla, donde nos pide que asignemos la capa de transporte. Básicamente, nos está diciendo que este programa podrá ser transportado desde nuestro entorno de desarrollo a un entorno productivo.&lt;/p&gt;

&lt;figure&gt;
    &lt;img sizes=&#34;(min-width: 468px) 468px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/2014/04/hola-mundo-objeto.png&#34; alt=&#34;hola-mundo-objeto&#34; width=&#34;468px&#34; height=&#34;312px&#34; /&gt;
&lt;/figure&gt;

&lt;p&gt;Sin embargo, como a nosotros esto ahora mismo no nos interesa pulsaremos el botón &lt;strong&gt;Objeto Local&lt;/strong&gt;. Esto significa que no lo vamos a poder transportar a productivo nunca.&lt;/p&gt;

&lt;h1 id=&#34;primeras-sentencias-abap&#34;&gt;PRIMERAS SENTENCIAS ABAP&lt;/h1&gt;

&lt;p&gt;Una vez creado nuestro programa, SAP nos genera automáticamente una serie de líneas de comentario y una línea de report.&lt;/p&gt;

&lt;figure&gt;
    &lt;img sizes=&#34;(min-width: 688px) 688px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/2014/04/hola-mundo-abap.png&#34; alt=&#34;hola-mundo-abap&#34; width=&#34;688px&#34; height=&#34;331px&#34; /&gt;
&lt;/figure&gt;

&lt;p&gt;En ABAP todas las sentencias que empiezan por &lt;strong&gt;asterisco&lt;/strong&gt; son comentarios no ejecutables. Y en estas líneas que SAP nos ha creado automáticamente se espera que escribamos una descripción general del propósito del programa.&lt;/p&gt;

&lt;p&gt;En segundo lugar nos encontramos con la sentencia &lt;strong&gt;REPORT&lt;/strong&gt; creada también de forma automática. Ésta es siempre la primera sentencia que se ha de escribir y sirve para indicar que el resto de sentencias que siguen corresponden a un programa de tipo report.&lt;/p&gt;

&lt;p&gt;En general la estructura de toda sentencia en ABAP sigue el mismo esquema, empieza con la palabra clave y acaba en un punto.&lt;/p&gt;

&lt;h1 id=&#34;declaración-de-una-variable&#34;&gt;DECLARACIÓN DE UNA VARIABLE&lt;/h1&gt;

&lt;p&gt;Para declarar una variable simple utilizaremos la palabra clave &lt;strong&gt;DATA&lt;/strong&gt; seguida del nombre de nuestra variable, su longitud, el tipo de variable y acabando con un punto.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-abap&#34; data-lang=&#34;abap&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DATA&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;&amp;lt;nombre_variable&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;&amp;lt;tipo&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;En este caso nuestra variable contendrá la cadena de caracteres de nuestro ‘Hola mundo’ y por lo tanto será de tipo carácter &amp;copy;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-abap&#34; data-lang=&#34;abap&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DATA&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;g_texto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;eventos&#34;&gt;Eventos&lt;/h1&gt;

&lt;p&gt;En todo report ABAP hay dos eventos muy importantes, el evento &lt;strong&gt;START-OF-SELECTION&lt;/strong&gt; y el evento &lt;strong&gt;END-OF-SELECTION&lt;/strong&gt;. Cuando introducimos una palabra clave de evento, todas las sentencias a continuación estarán incluidas dentro de ese evento.&lt;/p&gt;

&lt;h2 id=&#34;evento-start-of-selection&#34;&gt;Evento START-OF-SELECTION&lt;/h2&gt;

&lt;p&gt;Todas las sentencias que siguen a este evento hacen referencia a operaciones a realizar antes de que el programa presente resultados en pantalla. Aquí incluimos la asignación de nuestro texto ‘hola mundo’ (entre comillas simples) a nuestra variable mediante la palabra clave &lt;strong&gt;MOVE&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-abap&#34; data-lang=&#34;abap&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;MOVE&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;‘&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;Hola&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mundo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;’&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;TO&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;g_texto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;evento-end-of-selection&#34;&gt;Evento END-OF-SELECTION&lt;/h2&gt;

&lt;p&gt;Cualquier sentencia que siga a este evento provoca la presentación de resultados en pantalla. Aquí pues escribimos la sentencia &lt;strong&gt;WRITE&lt;/strong&gt; que muestra nuestro texto en pantalla.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-abap&#34; data-lang=&#34;abap&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WRITE&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;g_texto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;figure&gt;
    &lt;img sizes=&#34;(min-width: 688px) 688px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/2014/04/hola-mundo-abap.png&#34; alt=&#34;hola-mundo-abap&#34; width=&#34;688px&#34; height=&#34;331px&#34; /&gt;
&lt;/figure&gt;

&lt;h1 id=&#34;verificación-y-activación&#34;&gt;VERIFICACIÓN Y ACTIVACIÓN&lt;/h1&gt;

&lt;p&gt;Antes de poder ejecutar nuestro report hay que hacer dos pasos muy importantes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Verificar la sintaxis a través del menú &lt;strong&gt;Programa / Verificar / Sintaxis&lt;/strong&gt; y comprobar que lo escrito es sintácticamente correcto de acuerdo a las normas ABAP.&lt;/li&gt;
&lt;li&gt;Activar el programa a través del menú &lt;strong&gt;Programa / Activar&lt;/strong&gt;. Aunque ABAP no es un lenguaje compilado, aun así hay que generarlo para poder ejecutarlo. Mientras no lo hagamos, y si intentamos ejecutarlo, SAP sólo podría lanzar la última versión activa que tuviese en memoria.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;ejecución-del-programa&#34;&gt;EJECUCIÓN DEL PROGRAMA&lt;/h1&gt;

&lt;p&gt;A través del menú &lt;strong&gt;Programa / Ejecutar / Proceso directo&lt;/strong&gt; o, simplemente, pulsando &lt;strong&gt;F8&lt;/strong&gt; obtendremos el resultado de nuestro programa en pantalla.&lt;/p&gt;

&lt;figure&gt;
    &lt;img sizes=&#34;(min-width: 633px) 633px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/2014/04/hola-mundo-salida.png&#34; alt=&#34;hola-mundo-salida&#34; width=&#34;633px&#34; height=&#34;205px&#34; /&gt;
&lt;/figure&gt;

&lt;h1 id=&#34;transacciones&#34;&gt;TRANSACCIONES&lt;/h1&gt;

&lt;p&gt;Si queremos avanzar un poco más en nuestro “Hola mundo” podemos incluir nuestro programa en una transacción. Ya que los usuarios nunca podrán acceder al ABAP Workbench, no podrán ejecutar tampoco nuestros programas a través de la transacción SE38. Así que tenemos que crear siempre transacciones específicas para usuarios.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accedemos a la transacción SE93&lt;/li&gt;
&lt;li&gt;Como nombre de transacción escribiremos Z_HOLA. De nuevo, recordar que como clientes sólo podemos utilizar la Z o la Y como letra de inicio de nuestros objetos ABAP.&lt;/li&gt;
&lt;li&gt;Pulsamos crear, damos una descripción e indicamos que nuestra transacción es transacción de report.&lt;/li&gt;
&lt;li&gt;Indicamos el nombre de nuestro programa y grabamos como objeto local.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
    &lt;img sizes=&#34;(min-width: 469px) 469px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/2014/04/hola-mundo-transaccion.png&#34; alt=&#34;hola-mundo-transaccion&#34; width=&#34;469px&#34; height=&#34;219px&#34; /&gt;
&lt;/figure&gt;

&lt;p&gt;Ya está. Ahora utilizando la transacción Z_HOLA se ejecutará el resultado del programa Z_HOLA_MUNDO.&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>Cómo Crear Un Bundle Symfony2</title>
            <link>https://elbauldelprogramador.com/como-crear-un-bundle-symfony2/</link>
            <pubDate>Mon, 22 Jun 2015 09:00:00 +0000</pubDate>
            
            <guid>https://elbauldelprogramador.com/como-crear-un-bundle-symfony2/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;Éste artículo es una colaboración de &lt;em&gt;Alejandro Blanco&lt;/em&gt;, Director de desarrollo en &lt;a href=&#34;http://smsup.es&#34;&gt;smsup.es&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;En este articulo vamos a ver los pasos que he seguido para crear un bundle de symfony 2 de forma que sea redistribuible mediante composer. Este bundle servirá para facilitar la interacción con la api de smsup, desde symfony2 y poder enviar sms masivos. Es un bundle simple, pero tiene varias cosas interesantes (requiere otra librería, utiliza parámetros de configuración, etc.), y puede ser una buena introducción.&lt;/p&gt;

&lt;p&gt;&lt;!--ad--&gt;&lt;/p&gt;

&lt;p&gt;Voy a describir paso a paso como lo he creado, habrá otras formas igualmente válidas y seguramente mejores, esto es solo como yo lo he hecho.&lt;/p&gt;

&lt;p&gt;Asumo que ya tenemos composer instalado, si no es así, se puede instalar &lt;a href=&#34;https://getcomposer.org/download/&#34;&gt;siguiendo estos pasos&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;instalar-symfony2&#34;&gt;Instalar symfony2&lt;/h1&gt;

&lt;p&gt;Lo primero es instalar symfony, en este caso voy a instalar la versión 2.3, que es la versión menor con soporte ahora mismo, ya que quiero que sea compatible con el máximo de versiones posible y para ello lo mejor es crearlo sobre la menor versión.
Lo instalamos usando el comando siguiente:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;composer create-project symfony/framework-standard-edition /ruta/hasta/directorio-raiz-servidor-web/Symfony 2.3.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;creamos-la-base-del-bundle&#34;&gt;Creamos la base del bundle&lt;/h1&gt;

&lt;p&gt;Una vez instalado, creamos dentro de vendors el directorio del bundle siguiendo la estructura en la que queramos que luego se instale. En este caso voy a usar la estructura smsup\smsup-api-bundle.&lt;/p&gt;

&lt;p&gt;Ahora creamos dentro los archivos mínimos que debe tener el bundle para funcionar:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DependencyInjection/SmsupapiExtension.php&lt;/strong&gt;: este archivo gestiona la carga de la configuración de los servicios definidos por el bundle. Aquí vamos cargar el archivo services.yml.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;namespace smsup\SmsupapiBundle\DependencyInjection;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  use Symfony\Component\DependencyInjection\ContainerBuilder;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;use Symfony\Component\DependencyInjection\Loader\YamlFileLoader;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;use Symfony\Component\HttpKernel\DependencyInjection\Extension;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;class SmsupapiExtension extends Extension&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    public function load(array $configs, ContainerBuilder $container)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $loader = new YamlFileLoader($container, new FileLocator(__DIR__.&amp;#39;/../Resources/config&amp;#39;));&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $loader-&amp;gt;load(&amp;#39;services.yml&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Resources/config/services.yml&lt;/strong&gt;: aquí se definen los servicios que expone el bundle. Vamos a definir solo un servicio que expondrá los métodos de la api y gestionara las peticiones a la librería. También podemos incluir en este archivo parámetros de configuración que luego queramos usar.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;services:
  smsup.smsupapi.sender:
      class: smsup&lt;span class=&#34;se&#34;&gt;\S&lt;/span&gt;msupapiBundle&lt;span class=&#34;se&#34;&gt;\C&lt;/span&gt;lases&lt;span class=&#34;se&#34;&gt;\S&lt;/span&gt;msupSender
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Clases/SmsupSender.php&lt;/strong&gt;: esta será la clase que hemos definido para usar como servicio, en principio solo definiremos un método que haga un echo en pantalla para comprobar que funciona.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;namespace smsup\SmsupapiBundle\Clases;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;class SmsupSender {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  public function Send($mensaje)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    echo &amp;quot;Su mensaje es: &amp;quot; . $mensaje;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;SmsupapiBundle.php&lt;/strong&gt;: clase que extiende de Bundle y sirve para cargarlo.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;namespace smsup\SmsupapiBundle;&lt;/span&gt;

&lt;span class=&#34;x&#34;&gt;use Symfony\Component\HttpKernel\Bundle\Bundle;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;class SmsupapiBundle extends Bundle&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Con esto tendríamos definidos los archivos mínimos para crear el bundle y poder usarlo. Para probar que funciona bien vamos a modificar el archivo de autoload generado por composer (solo a modo de prueba, esto no debe hacerse ya que cada vez que instalamos algo con composer se modifican estos archivos), para simular como quedará una vez nuestro bundle sea instalado y añadiremos la carga del bundle en AppKernel.&lt;/p&gt;

&lt;p&gt;En vendor\composer\autoload_psr4.php, añadir esta entrada en el array devuelto:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&amp;#39;smsup\\SmsupapiBundle\\&amp;#39; =&amp;gt; array($vendorDir . &amp;#39;/smsup/SmsupapiBundle&amp;#39;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;En AppKernel añadimos:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;new smsup\SmsupapiBundle\SmsupapiBundle(),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ahora solo queda comprobar que todo funciona bien, para ello vamos a Acme\DemoBundle\Controller\WelcomeController.php y en el método indexAction añadimos el siguiente código:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;$sender = $this-&amp;gt;get(&amp;#39;smsup.smsupapi.sender&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;$sender-&amp;gt;send(&amp;#39;entró y funciona&amp;#39;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Esto simplemente obtendrá el servicio definido en nuestro bundle y llamara al método send que definimos, pasando el mensaje &amp;ldquo;entró y funciona&amp;rdquo;. Al ejecutar en el navegador localhost/RUTA_SYMFONY/web/app_dev.php/ deberíamos ver la página de bienvenida de symfony, pero en la primera línea debe aparecer el texto &amp;ldquo;Su mensaje es: entró funciona&amp;rdquo;, lo cual nos indica que todo ha ido bien.&lt;/p&gt;

&lt;h1 id=&#34;subida-al-repositorio&#34;&gt;Subida al repositorio&lt;/h1&gt;

&lt;p&gt;Como ya sabemos que funciona correctamente nuestro bundle, aunque no haga nada útil aun, vamos a subirlo a nuestro repositorio git y a añadirlo a packagist para que pueda ser descargado usando composer. Para esto debemos añadir el archivo composer.json, en el que vamos a definir nuestro bundle. En nuestro caso quedaría así:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;smsup/smsup-api-bundle&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;symfony-bundle&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Bundle Symfony2 para el uso de la api de smsup.es para el envio de sms&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;keywords&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;sms&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;sms api&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;bundle sms&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;homepage&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;https://www.smsup.es&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;license&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;MIT&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;require&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;quot;php&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;gt;=5.3.2&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;quot;smsup/smsuplib&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;~2.0&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;autoload&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;quot;psr-4&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;&amp;quot;smsup\\SmsupapiBundle\\&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Los parámetros importantes aquí son los siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name:&lt;/strong&gt; es el nombre que le damos y deber ser único&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;type:&lt;/strong&gt; indicamos el tipo que es, en este caso un bundle de symfony&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;require:&lt;/strong&gt; indicamos las dependencias de nuestro bundle, en este caso la librería &amp;ldquo;smsup/smsuplib&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;autoload:&lt;/strong&gt; indicamos que el namespace smsup\SmsupapiBundle hace referencia a la raíz de nuestro bundle.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ya solo debemos declarar nuestro paquete en packagist, para lo cual tenemos que acceder a &lt;a href=&#34;https://packagist.org&#34;&gt;https://packagist.org&lt;/a&gt; y hacer login. Luego vamos a &amp;ldquo;Submit&amp;rdquo; e indicamos el enlace al repositorio y solo con esto ya nos cargara el mismo. Para que cada vez que actualicemos nuestro repositorio packagist actualice los datos, se recomienda añadir un webhook al repositorio. En el caso de github, debemos ir a Settings -&amp;gt; Weebhooks &amp;amp; Services -&amp;gt; Add Service. Seleccionar tipo Packagist e indicar el nombre de usuario y la clave de la API de packagist.&lt;/p&gt;

&lt;p&gt;Una vez hecho esto vamos a instalar nuestro bundle desde composer para ver que todo es correcto. Antes vamos a eliminar el directorio que creamos en vendor, para que se instale limpiamente.&lt;/p&gt;

&lt;p&gt;Como no hemos definido ninguna versión en nuestro repositorio, para que composer descargue el paquete, debemos cambiar en el archivo composer.json de symonfy, la estabilidad mínima de los paquetes a descargar, ya que la rama master se considera de desarrollo. Esto se hace cambiando &amp;ldquo;stable&amp;rdquo; por &amp;ldquo;dev&amp;rdquo; en:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;minimum-stability&amp;quot;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;stable&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Para instalarlo ejecutamos la siguiente instruccion:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;composer require smsup/smsup-api-bundle master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Hemos incluido &amp;ldquo;master&amp;rdquo; para indicar que se descargue la rama master, ya que aún no definimos ninguna versión estable.&lt;/p&gt;

&lt;p&gt;Tras esto ya tenemos nuestro bundle instalado correctamente en vendors y si ejecutamos el código que teníamos de prueba veremos de nuevo el mensaje &amp;ldquo;Su mensaje es: entró funciona&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Ahora ya solo debemos incluir las funcionalidades que queramos que tenga e ir actualizando el repositorio.
Vamos a añadir la funcionalidad y luego veremos como crear la primera versión estable.&lt;/p&gt;

&lt;h1 id=&#34;añadimos-parámetros-obligatorios-de-configuración&#34;&gt;Añadimos parámetros obligatorios de configuración&lt;/h1&gt;

&lt;p&gt;Vamos a añadir dos parámetros de configuración obligatorios, en los que se le indicara al bundle el ID de la Api y la clave secreta de la misma.
Para esto debemos crear el archivo DependencyInjection/Configuration.php en el que indicamos, mediante el método getConfigTreeBuilder, el árbol de parámetros que vamos a usar.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;namespace smsup\SmsupapiBundle\DependencyInjection;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;use Symfony\Component\Config\Definition\Builder\TreeBuilder;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;use Symfony\Component\Config\Definition\ConfigurationInterface;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;class Configuration implements ConfigurationInterface&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    public function getConfigTreeBuilder()&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $treeBuilder = new TreeBuilder();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $rootNode = $treeBuilder-&amp;gt;root(&amp;#39;smsupapi&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        $rootNode-&amp;gt;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;          children()&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            -&amp;gt;scalarNode(&amp;#39;api_id&amp;#39;)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                -&amp;gt;isRequired()&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                -&amp;gt;cannotBeEmpty()&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            -&amp;gt;end()&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            -&amp;gt;scalarNode(&amp;#39;api_secret&amp;#39;)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                -&amp;gt;isRequired()&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                -&amp;gt;cannotBeEmpty()&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;            -&amp;gt;end()&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;          -&amp;gt;end()&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        ;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;        return $treeBuilder;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Aquí indicamos que en el nodo &amp;ldquo;smsupapi&amp;rdquo; debe haber dos parámetros &amp;ldquo;api_id&amp;rdquo; y &amp;ldquo;api_secret&amp;rdquo; y que son obligatorios y no deben estar vacíos. Según esta configuración, si falta alguno de los parámetros symfony dará un error.&lt;/p&gt;

&lt;p&gt;Luego debemos añadir unas líneas al archivo DependencyInjection/SmsupapiExtension.php para que se procese esa configuración, y hacemos que se inyecten los valores de los parámetros al servicio que habíamos creado.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;public function load(array $configs, ContainerBuilder $container)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $processor = new Processor();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $configuration = new Configuration();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $config = $processor-&amp;gt;processConfiguration($configuration, $configs);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $loader = new YamlFileLoader($container, new FileLocator(__DIR__.&amp;#39;/../Resources/config&amp;#39;));&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $loader-&amp;gt;load(&amp;#39;services.yml&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $container-&amp;gt;getDefinition(&amp;#39;smsup.smsupapi.sender&amp;#39;)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                -&amp;gt;addMethodCall(&amp;#39;setApiid&amp;#39;, array($config[&amp;#39;api_id&amp;#39;]));&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $container-&amp;gt;getDefinition(&amp;#39;smsup.smsupapi.sender&amp;#39;)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;                -&amp;gt;addMethodCall(&amp;#39;setApisecret&amp;#39;, array($config[&amp;#39;api_secret&amp;#39;]));&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Para ello añadimos al servicio los setters correspondientes a la clase del nuestro servicio:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;protected $apiId;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;protected $apiSecret;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;public function setApiid($apiId)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  $this-&amp;gt;apiId = $apiId;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;public function setApisecret($apiSecret)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  $this-&amp;gt;apiSecret = $apiSecret;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Inyectamos de esta forma los parámetros para evitar inyectar el container al servicio, ya que no vamos a necesitarlo para ninguna otra cosa.&lt;/p&gt;

&lt;h1 id=&#34;añadimos-la-funcionalidad-a-nuestro-servicio&#34;&gt;Añadimos la funcionalidad a nuestro servicio&lt;/h1&gt;

&lt;p&gt;Ahora vamos a añadir la funcionalidad que queremos que tenga a nuestro servicio. En este caso vamos a exponer 5 métodos públicos, que se corresponden con los métodos de la librería &amp;ldquo;smsuplib&amp;rdquo;. Añadiremos algunos cambios para facilitar el paso de parámetros y la gestión del resultado de la petición.
SmsupSender.php quedaría así:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;  namespace smsup\SmsupapiBundle\Clases;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  use smsup\smsuplib;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;class SmsupSender {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  protected $apiId;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  protected $apiSecret;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  public function setApiid($apiId)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $this-&amp;gt;apiId = $apiId;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  public function setApisecret($apiSecret)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $this-&amp;gt;apiSecret = $apiSecret;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  public function getNewSms()&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    return new Sms;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  public function enviarSms(Sms $sms)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $lib = $this-&amp;gt;getSmsapilib();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $respuesta = $lib-&amp;gt;NuevoSms($sms-&amp;gt;getTexto(), $sms-&amp;gt;getNumeros(), $sms-&amp;gt;getFechaenvio(), $sms-&amp;gt;getReferencia(), $sms-&amp;gt;getRemitente());&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    return $this-&amp;gt;setResult($respuesta);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  public function eliminarSms($idsms)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $lib = $this-&amp;gt;getSmsapilib();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $respuesta = $lib-&amp;gt;EliminarSMS($idsms);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    return $this-&amp;gt;setResult($respuesta);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  public function estadoSms($idsms)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $lib = $this-&amp;gt;getSmsapilib();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $respuesta = $lib-&amp;gt;EstadoSMS($idsms);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    return $this-&amp;gt;setResult($respuesta);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  public function creditosDisponibles()&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $lib = $this-&amp;gt;getSmsapilib();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $respuesta = $lib-&amp;gt;CreditosDisponibles();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    return $this-&amp;gt;setResult($respuesta);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  public function resultadoPeticion($referencia)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $lib = $this-&amp;gt;getSmsapilib();&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $respuesta = $lib-&amp;gt;ResultadoPeticion($referencia);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    return $this-&amp;gt;setResult($respuesta);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  private function getSmsapilib()&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    return new smsuplib($this-&amp;gt;apiId, $this-&amp;gt;apiSecret);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  private function setResult($respuesta)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    return new Result($respuesta[&amp;#39;httpcode&amp;#39;], $respuesta[&amp;#39;resultado&amp;#39;]);&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Añadimos dos clases como ayuda:&lt;/p&gt;

&lt;h1 id=&#34;sms-php&#34;&gt;Sms.php&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;namespace smsup\SmsupapiBundle\Clases;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;class Result {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  protected $httpcode;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  protected $result;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  public function __construct ($httpcode, $result)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $this-&amp;gt;httpcode = $httpcode;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $this-&amp;gt;result = $result;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  public function getHttpcode()&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    return $this-&amp;gt;httpcode;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  public function getResult()&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    return $this-&amp;gt;result;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;result-php&#34;&gt;Result.php&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;namespace smsup\SmsupapiBundle\Clases;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;class Result {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  protected $httpcode;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  protected $result;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  public function __construct ($httpcode, $result)&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $this-&amp;gt;httpcode = $httpcode;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    $this-&amp;gt;result = $result;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  public function getHttpcode()&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    return $this-&amp;gt;httpcode;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  public function getResult()&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  {&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;    return $this-&amp;gt;result;&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;  }&lt;/span&gt;
&lt;span class=&#34;x&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ahora ya tenemos completada la primera versión de nuestro bundle, por lo que actualizamos el repositorio y vamos a crear la primera versión estable del mismo.&lt;/p&gt;

&lt;h1 id=&#34;primera-versión-estable&#34;&gt;Primera versión estable&lt;/h1&gt;

&lt;p&gt;Para definir una versión solo debemos añadir una etiqueta con la versión al repositorio y packagist se encarga del resto. La etiqueta debe tener el formato &amp;lsquo;X.Y.Z&amp;rsquo; o &amp;lsquo;vX.Y.Z&amp;rsquo; (también puede llevar un sufijo RC, beta, etc). En nuestro caso será la etiqueta &amp;ldquo;v1.0.0&amp;rdquo;.
Hecho esto, ya está disponible una versión estable de nuestro bundle que puede instalarse de la siguiente forma:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;composer require smsup/smsup-api-bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Podéis ver como quedan todos los archivos &lt;a href=&#34;https://github.com/smsup/SmsupapiBundle&#34;&gt;en el repositorio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Espero que resulte útil esta introducción a la creación de un bundle y quedo abierto a cualquier comentario o mejora que queráis hacer.&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
