<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Cristina on The Programmer&#39;s Chest</title>
        <link>https://elbauldelprogramador.com/en/author/cristina/</link>
        <description>Recent content in Cristina on The Programmer&#39;s Chest</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>es-ES</language>
        <lastBuildDate>Fri, 20 Oct 2017 11:50:46 +0200</lastBuildDate>
        <image>
            <url>https://elbauldelprogramador.com/img/bio-photo-rss.png</url>
            <link>https://elbauldelprogramador.com/en/author/cristina/</link>
            <title>Cristina on The Programmer&#39;s Chest</title>
            <width>144</width>
            <height>144</height>
        </image>
        <atom:link href="https://elbauldelprogramador.com/en/author/cristina/" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Biometrics applied to security - Pattern Recognition</title>
            <link>https://elbauldelprogramador.com/en/biometrics-pattern-recognition/</link>
            <pubDate>Fri, 20 Oct 2017 11:50:46 +0200</pubDate>
            
            <guid>https://elbauldelprogramador.com/en/biometrics-pattern-recognition/</guid>
            <description>&lt;figure&gt;
    &lt;a href=&#34;https://elbauldelprogramador.com/img/hotlink-ok/Sistemas-biometricos-aplicados-a-la-seguridad.png&#34;&gt;&lt;img sizes=&#34;(min-width: 640px) 640px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/hotlink-ok/Sistemas-biometricos-aplicados-a-la-seguridad.png&#34; title=&#34;Biometría Aplicada a La Seguridad - Reconocimiento De Patrones&#34; alt=&#34;Biometría Aplicada a La Seguridad - Reconocimiento De Patrones&#34; width=&#34;640px&#34; height=&#34;405px&#34; /&gt;&lt;/a&gt;
    &lt;span class=&#34;image-credit&#34;&gt;image credits: pixabay&lt;a href=&#34;https://pixabay.com/en/biometrics-eye-security-154660/&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;/figure&gt;

&lt;p&gt;The next article takes part of a team work done for the subject &lt;em&gt;Security in operating systems&lt;/em&gt; from the Granada computer engineering school (ETSIIT UGR). The group was composed by &lt;a href=&#34;http://twitter.com/MPV_Prod&#34;&gt;@MPV_Prod&lt;/a&gt; , &lt;a href=&#34;http://twitter.com/_musicalnote&#34;&gt;@_musicalnote&lt;/a&gt; and &lt;a href=&#34;http://twitter.com/elbaulp&#34;&gt;@ElBaulP&lt;/a&gt;. This post is authored by @_musicalnote.&lt;/p&gt;

&lt;h1 id=&#34;index&#34;&gt;Index&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://elbauldelprogramador.com/biometria-seguridad-introduccion&#34; title=&#34;Biometrics applied to security - Introduction&#34;&gt;Biometrics applied to security - Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Biometrics applied to security - Pattern recognition&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://elbauldelprogramador.com/sistemas-biometricos&#34; title=&#34;Biometrics applied to security - Biometrics systems&#34;&gt;Biometrics applied to security - Biometrics systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;!--ad--&gt;&lt;/p&gt;

&lt;h2 id=&#34;pattern-recognition&#34;&gt;Pattern recognition&lt;/h2&gt;

&lt;p&gt;Previously, we have talk about the different techniques that exist to perform the identification of an individual. Now we will get into &lt;strong&gt;how&lt;/strong&gt; it is possible to recognise a face, an iris or a signature with pattern matching.&lt;/p&gt;

&lt;h3 id=&#34;what-is-pattern-recognition&#34;&gt;What is pattern recognition?&lt;/h3&gt;

&lt;p&gt;Is the science that describes and classifies objects, people, signals, representations, etc. Pattern recognition has multiple application fields, however the most related with &lt;a href=&#34;https://elbauldelprogramador.com/security-now/&#34; title=&#34;security articles&#34;&gt;security&lt;/a&gt; is, definitely the biometric recognition of people. It is about assigning an identity to a person, or verify that it is what it says, by meassuring certain own characteristics. Characteristics as voice, face, fingerprints, iris, signature, etc.&lt;/p&gt;

&lt;h3 id=&#34;the-problem-of-pattern-recognition&#34;&gt;The problem of pattern recognition&lt;/h3&gt;

&lt;p&gt;We humans are so good recognising patterns. Our brain has some kind of algorithms, still unknown, that are much faster than any computer when recognising faces or voices, for explample.&lt;/p&gt;

&lt;h3 id=&#34;approaches-to-pattern-recognition&#34;&gt;Approaches to Pattern Recognition&lt;/h3&gt;

&lt;p&gt;There are many type of aproaches, although they are used to be combined between them resulting in hybrid systems. All of them have two steps in common:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Training or learning step&lt;/li&gt;
&lt;li&gt;Classification or test step&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First of all, for building a pattern recognition system that can identify an individual through any of its personal characteristics we must have in our hands an ammount of data of such characteristic, so that the probability of creating a model that succeeds recognizing by this characteristic increase. However, a common mistake is to not have in consideration if those data are or not free from variability (noise introduced by sensors, scale changes, distortions, rotations&amp;hellip;)  so that before training and testing the system, it is very important to clean that data or take a decision about the affected data (like not using them to train the classifier, for example). Finally, after training the system, we proceed to test it. For that purpose we give the system another dataset of the characteristic that we are analyzing, evaluating that way the ability of the recognizer to hit in its decisions.&lt;/p&gt;

&lt;h3 id=&#34;feature-extraction&#34;&gt;Feature extraction&lt;/h3&gt;

&lt;p&gt;In a recognizer, it is so important to consider the feature extraction (parametrization) to perform on the input, that is, selecting which characteristic vectors are we using. For example, in images we can use the bitmap. Is undoubtedly that parametrization will ease the problem, as through it the ammount of data to process decreases and we get the feature space turned, being easier to discriminate on it (see which samples are meaningful and which are not).&lt;/p&gt;

&lt;h3 id=&#34;class-separability&#34;&gt;Class separability&lt;/h3&gt;

&lt;p&gt;If we want to minimize the error of our biometrics system, we must try to make the data classification as accurate as possible, and for that we must select the classifier that best fits our data (distinct classifiers, distinct results&amp;hellip;), by choosing correctly the classification criteria.&lt;/p&gt;

&lt;p&gt;In the next figure we can see how both two classes are perfectly separable when using both vector components (2 dimensions), but if we reduce it to just one dimension, we can see that both classes are no longer separable, as they overlap.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&#34;https://elbauldelprogramador.com/img/separability.png&#34;&gt;&lt;img sizes=&#34;(min-width: 320px) 320px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/separability.png&#34; title=&#34;class separability using two-dimensional vectors&#34; alt=&#34;class separability using two-dimensional vectors&#34; width=&#34;320px&#34; height=&#34;316px&#34; /&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;It is easy to ilustrate it in an image when the number of classes is low, as in this example, as we got just two classes. But the difficulty increases with the number of classes. How can we know if our classifier is doing well or not? How can we know if a characteristic is discriminating or not? In that case proceed to calculate the discriminating mean of the characteristic, from the mean distance between classes and normalizing by its variance.&lt;/p&gt;

&lt;h3 id=&#34;introduction-to-intrusion-detection&#34;&gt;Introduction to intrusion detection&lt;/h3&gt;

&lt;p&gt;Applying biometrics techniques in &lt;a href=&#34;https://elbauldelprogramador.com/6-formas-usadas-por-los-cibercriminales-para-robar-o-vulnerar-credenciales-de-login/&#34; title=&#34;6 ways used by cybercriminals to steal or infringe login credentials&#34;&gt;intrusion&lt;/a&gt; detection systems allow us to intensify the security of our system, for example, during the authentication, as we could establish a more detailed profile for each user, without having to worry about certain problems like for example if the user is writting the password so others can see it, or if the user share its password or if it is stolen&amp;hellip; thus avoiding a possibility of attack that affects the IDS performance.&lt;/p&gt;

&lt;p&gt;As is evident, the use of biometrics is not making impossible any security attack to the system, but at least it will ask every user to identify previously, through the authentication and validation mechanisms, so that any bad use or attack caused by an user and detected by an IDS will point to a concrete user.&lt;/p&gt;

&lt;p&gt;Intrusion detection systems are still getting better, but it is already spoken that in the future advanced techniques of biometry could be developed, as for example, DNA recognition.&lt;/p&gt;

&lt;h1 id=&#34;index-1&#34;&gt;Index&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://elbauldelprogramador.com/biometria-seguridad-introduccion&#34; title=&#34;Biometrics applied to security - Introduction&#34;&gt;Biometrics applied to security - Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Biometrics applied to security - Pattern recognition&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://elbauldelprogramador.com/sistemas-biometricos&#34; title=&#34;Biometrics applied to security - Biometrics systems&#34;&gt;Biometrics applied to security - Biometrics systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.es/gp/product/8478976361/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp;=3626&amp;amp;creative;=24822&amp;amp;creativeASIN;=8478976361&amp;amp;linkCode;=as2&amp;amp;tag;=bmacoc-21&#34; title=&#34;M. Tapiador Mateos and J. A. Sigüenza Pizarro, Tecnologías biométricas aplicadas a la seguridad&#34;&gt;M. Tapiador Mateos and J. A. Sigüenza Pizarro, Tecnologías biométricas aplicadas a la
seguridad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.es/gp/product/9814656526/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp;=3626&amp;amp;creative;=24822&amp;amp;creativeASIN;=9814656526&amp;amp;linkCode;=as2&amp;amp;tag;=bmab-21&#34; title=&#34;C. H. Chen and C. H. Chen, Handbook of Pattern Recognition and Computer Vision 4th edition&#34;&gt;C. H. Chen and C. H. Chen, Handbook of Pattern Recognition and Computer Vision 4th edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://es.wikipedia.org/wiki/Biometr%C3%ADa&#34; title=&#34;Wikipedia, “Biometría, según wikipedia.”&#34;&gt;Wikipedia, “Biometría, según wikipedia.”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.biometria.gov.ar/acerca-de-la-biometria/historia-de-la-biometria.aspx&#34; title=&#34;G. Argentina, “Historia de la biometría.”&#34;&gt;G. Argentina, “Historia de la biometría.”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
        <item>
            <title>Change your gnome shell background&#39;s image and put a text color that suits, automatically</title>
            <link>https://elbauldelprogramador.com/en/imagen-terminal-color-texto-a-juego-linux/</link>
            <pubDate>Mon, 09 Oct 2017 20:09:46 +0100</pubDate>
            
            <guid>https://elbauldelprogramador.com/en/imagen-terminal-color-texto-a-juego-linux/</guid>
            <description>&lt;p&gt;Sure you are that kind of person that spend hours in front of a computer with one or more terminals open. And sure, you are very used to the shell black background with white letters, or whatever shell style you put long time ago&amp;hellip; Because, lets be honest, changing it everyday is not the most fun job. But&amp;hellip; What if it changes itself automatically? What if you could just have your favorite pictures as shell backsground&amp;rsquo;s images, with a text that suits the colors in each of that images and you just have to no nothing?&lt;/p&gt;

&lt;p&gt;&lt;!--ad--&gt;&lt;/p&gt;

&lt;p&gt;Here I want to tell you how I thought to do it with a bash script, and thus escape from the shell style routine.&lt;/p&gt;

&lt;h1 id=&#34;before-we-start&#34;&gt;Before we start&amp;hellip;&lt;/h1&gt;

&lt;h2 id=&#34;check-you-gnome-shell-version&#34;&gt;Check you gnome-shell version&lt;/h2&gt;

&lt;p&gt;That script is valid only for &lt;strong&gt;gnome versions &amp;lt; 3.8&lt;/strong&gt;. I Have tested it in Linux Mint Debian Edition and in Ubuntu 14.04 (in this last I had to install gnome-shell).&lt;/p&gt;

&lt;p&gt;To install gnome-shell (just in case you need to):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    cris@cris ~ $ sudo apt-get install gnome-shell&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to check the gnome version:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    cris@cris ~ $ gnome-shell --version&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;install-imagemagick-and-gawk&#34;&gt;Install ImageMagick and gawk&lt;/h2&gt;

&lt;p&gt;We are goint to use some ImageMagick functions to convert the images, and gawk for filtering expressions. To install them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    cris@cris ~ $ sudo apt-get install gawk
    cris@cris ~ $ sudo apt-get install imagemagick&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;script-explanation&#34;&gt;Script explanation&lt;/h1&gt;

&lt;p&gt;What we want this script to do is to modify directly the shell configuration values that are set in the file &lt;strong&gt;%gconf.xml&lt;/strong&gt; which is placed at &lt;code&gt;home/user/.gconf/apps/gnome-terminal/profiles/Default/&lt;/code&gt; for gnome versions &amp;lt; 3.8.&lt;/p&gt;

&lt;h2 id=&#34;variables-definition&#34;&gt;Variables definition&lt;/h2&gt;

&lt;p&gt;Initially, we are declaring the variables with the path of the commands we are going to use frequently. It is not mandatory, but it is recommended. The &lt;strong&gt;ROUTE&lt;/strong&gt; variable contains the path for the folder where the images that we want to use as background images are placed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;GCONFT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/bin/gconftool-2&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;SORT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/bin/sort&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;GAWK&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/bin/gawk&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;CNVRT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/bin/convert&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;ROUTE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/myPath/*&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;gconftool-2&lt;/strong&gt; : gnome configuration tool. We use it with the &lt;em&gt;set&lt;/em&gt; option to modify the configuration file.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sort&lt;/strong&gt; : command that sorts text lines.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gawk&lt;/strong&gt; : pattern scanner. We use it to filter the hexadecimal pattern.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;convert&lt;/strong&gt; : we use this command to resize the image and convert it to an hibstogram.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;taking-images&#34;&gt;Taking Images&lt;/h2&gt;

&lt;p&gt;We take randomly an image of &lt;strong&gt;myPath&lt;/strong&gt; for the shell background:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;FILE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;shuf -n &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -e &lt;span class=&#34;nv&#34;&gt;$ROUTE&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We clear the path name and take only the image&amp;rsquo;s name:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;FILECONV&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;basename &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$FILE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lets resize the image (just if needed, for example if the images we want to use are for desktop background). To not modify the original image neither keeping so many unnecessary copies, we save it in /tmp.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    convert &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$FILE&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; -resize %50 &lt;span class=&#34;s2&#34;&gt;&amp;#34;/tmp/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$FILECONV&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As my images are desktop background size, I resize them to the half of their size to fit better the shell.&lt;/p&gt;

&lt;p&gt;Optional: we take another image from the folder to set it as desktop background image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;FILED&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;shuf -n &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -e &lt;span class=&#34;nv&#34;&gt;$ROUTE&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;set-the-terminal-s-background-image&#34;&gt;Set the terminal&amp;rsquo;s background image&lt;/h2&gt;

&lt;p&gt;We modify some configurations that are by default before applying changes, to have an effect:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$GCONFT&lt;/span&gt; --set /apps/gnome-terminal/profiles/Default/background_type --type string &lt;span class=&#34;s2&#34;&gt;&amp;#34;image&amp;#34;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#solido por defecto
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$GCONFT&lt;/span&gt; --set /apps/gnome-terminal/profiles/Default/use_custom_command --type bool &lt;span class=&#34;s2&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;

    &lt;span class=&#34;nv&#34;&gt;$GCONFT&lt;/span&gt; --set /apps/gnome-terminal/profiles/Default/use_theme_colors --type bool &lt;span class=&#34;s2&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;

    &lt;span class=&#34;nv&#34;&gt;$GCONFT&lt;/span&gt; --set /apps/gnome-terminal/profiles/Default/use_custom_default_size --type bool &lt;span class=&#34;s2&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we can just take the resized image and set it as terminal&amp;rsquo;s background image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$GCONFT&lt;/span&gt; --set /apps/gnome-terminal/profiles/Default/background_image --type string &lt;span class=&#34;s2&#34;&gt;&amp;#34;/tmp/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$FILECONV&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Last, we set a dark background color for shell and a high opacity level, to make the text looks better:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$GCONFT&lt;/span&gt; --set /apps/gnome-terminal/profiles/Default/background_color --type string &lt;span class=&#34;s2&#34;&gt;&amp;#34;#181824243131&amp;#34;&lt;/span&gt;

    &lt;span class=&#34;nv&#34;&gt;$GCONFT&lt;/span&gt; --set /apps/gnome-terminal/profiles/Default/background_darkness --type float &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.78&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;set-the-text-color-to-suit-with-the-image&#34;&gt;Set the text color to suit with the image&lt;/h2&gt;

&lt;p&gt;To do that, we first get the color hibstogram from the image, and then we take a color tone of them. With &lt;strong&gt;convert&lt;/strong&gt; we can specify the number of colors to take and the deeper we want to go in the image to get them. Then, we sort then according to their numeric order and filter just the hexadecimal code of the colors with &lt;strong&gt;gawk&lt;/strong&gt;. We save it in a text file called paleta.txt which will be created at /tmp.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$CNVRT&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/tmp/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$FILECONV&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; -colors &lt;span class=&#34;m&#34;&gt;25&lt;/span&gt; -depth &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; -format &lt;span class=&#34;s1&#34;&gt;&amp;#39;%c&amp;#39;&lt;/span&gt; histogram:info:- &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$SORT&lt;/span&gt; --general-numeric-sort &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$GAWK&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;match ($0, /^ *[0-9]+: \([^)]+\) (#[0-9A-F]+) .+$/, a) { print a[1] }&amp;#39;&lt;/span&gt; &amp;gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/tmp/paleta.txt&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To finish, we open the temporary file &lt;strong&gt;paleta.txt&lt;/strong&gt; and read the first 6 lines from it, that is, we read the first 6 colors:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# open file
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&amp;lt; /tmp/paleta.txt
    &lt;span class=&#34;c1&#34;&gt;#read 6 lines
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; color1 &amp;lt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; color2 &amp;lt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; color3 &amp;lt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; color4 &amp;lt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; color5 &amp;lt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; color6 &amp;lt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;#close
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&amp;lt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;-&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and we set the last readed color as the shell&amp;rsquo;s text color:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$GCONFT&lt;/span&gt; --set /apps/gnome-terminal/profiles/Default/foreground_color --type string &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$color6&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Why taking the 6º color? well thats because as colors are ordered from dark to light, the lighther ones, that are the ones that give better results, are in the center possition of the hibstogram. However, you can modify it depending on your images. The script is not perfect! the image folder I use has 700 images and there is sometimes someone that fails suiting with text color, especially the very dark images where no light colors can be found. If you have any idea of improvement, comment it or let me know!&lt;/p&gt;

&lt;p&gt;Optional: if you also want to change the desktop background image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    gsettings &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; org.gnome.desktop.background picture-uri &lt;span class=&#34;s2&#34;&gt;&amp;#34;file:///&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$FILED&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;enjoy-and-show-off-your-terminals&#34;&gt;Enjoy and show off your terminals&lt;/h1&gt;

&lt;h1 id=&#34;plan-it-execution&#34;&gt;Plan it execution&lt;/h1&gt;

&lt;p&gt;To avoid executing the script by hand, you can automate it execution using &lt;strong&gt;crontab&lt;/strong&gt;, for example, if you want it to execute each time you boot your pc:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    cris@cris ~ $ crontab -e &lt;span class=&#34;c1&#34;&gt;# open crontab
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    @reboot /path_to_script/ChangeTerminals.sh # add task&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;some-examples&#34;&gt;Some examples&lt;/h1&gt;

&lt;figure&gt;
    &lt;img sizes=&#34;(min-width: 656px) 656px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/imagen-terminal-color-texto-a-juego-linux2.png&#34; alt=&#34;imagen-terminal-color-texto-a-juego-linux2&#34; title=&#34;Ejemplo 1&#34; width=&#34;656px&#34; height=&#34;386px&#34; /&gt;
&lt;/figure&gt;
&lt;figure&gt;
    &lt;img sizes=&#34;(min-width: 650px) 650px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/imagen-terminal-color-texto-a-juego-linux3.png&#34; alt=&#34;imagen-terminal-color-texto-a-juego-linux2&#34; title=&#34;Ejemplo 1&#34; width=&#34;650px&#34; height=&#34;386px&#34; /&gt;
&lt;/figure&gt;
&lt;figure&gt;
    &lt;img sizes=&#34;(min-width: 656px) 656px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/imagen-terminal-color-texto-a-juego-linux4.png&#34; alt=&#34;imagen-terminal-color-texto-a-juego-linux2&#34; title=&#34;Ejemplo 1&#34; width=&#34;656px&#34; height=&#34;385px&#34; /&gt;
&lt;/figure&gt;
&lt;figure&gt;
    &lt;img sizes=&#34;(min-width: 1003px) 1003px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/imagen-terminal-color-texto-a-juego-linux5.png&#34; alt=&#34;imagen-terminal-color-texto-a-juego-linux2&#34; title=&#34;Ejemplo 1&#34; width=&#34;1003px&#34; height=&#34;581px&#34; /&gt;
&lt;/figure&gt;

&lt;h1 id=&#34;link-to-code&#34;&gt;Link to code&lt;/h1&gt;

&lt;p&gt;You can check the script at &lt;a href=&#34;https://github.com/CristinaHG/My-TerminalsBacgroundSetter&#34; title=&#34;My Terminals Background Setter Repository &#34;&gt;github&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>Mining your github community with R - Analysing languages popularity</title>
            <link>https://elbauldelprogramador.com/en/githubmininglanguages/</link>
            <pubDate>Mon, 24 Apr 2017 21:13:39 +0200</pubDate>
            
            <guid>https://elbauldelprogramador.com/en/githubmininglanguages/</guid>
            <description>&lt;p&gt;In this post we are exploring our github community considering our friends (or followers) in that social network. We will first give some directions for creating an application and starting to use the github API. Then we will extract the information we need to perform our analysis and get what programming languages do our friends use and what is the most popular and the less popular language. Let&amp;rsquo;s explore the languages popularity in your community!&lt;/p&gt;

&lt;h1 id=&#34;1-create-the-app-install-packages-authenticate&#34;&gt;1.  Create the app, install packages, authenticate&lt;/h1&gt;

&lt;h2 id=&#34;1-1-app-registration&#34;&gt;1.1 App registration&lt;/h2&gt;

&lt;p&gt;First of all, as we want to access public data from Github, we need to register an app with authentication to do that. This will allow us to have no limit of calls.
So go to &lt;a href=&#34;https://developer.github.com/program/&#34; title=&#34;github developer program page&#34;&gt;github developer program page&lt;/a&gt; and click on &lt;strong&gt;Register now&lt;/strong&gt;. Then select an account and in &lt;strong&gt;Personal settings&lt;/strong&gt; tabs select &lt;strong&gt;Authorized applications&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you already have an authorized aplication to access gitHub API, you must see it here. Otherwise if you don&amp;rsquo;t have any registered app, then go to &lt;strong&gt;OAuth applications&lt;/strong&gt; and click on &lt;strong&gt;Register a new application&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There you have to register your new application, giving it a name, a description&amp;hellip; Fill the fields and in &lt;strong&gt;Callback URL&lt;/strong&gt; enter &lt;a href=&#34;http://localhost:1410/&#34; title=&#34;localhost:1410&#34;&gt;localhost:1410&lt;/a&gt; which is the URL that github will return once the app is authenticated.&lt;/p&gt;

&lt;p&gt;Now you have registered your app, the &lt;strong&gt;Client ID&lt;/strong&gt; and &lt;strong&gt;Client Secret&lt;/strong&gt; for your app will be generated. You can see them clicking on &lt;strong&gt;OAuth applications -&amp;gt; Your App&lt;/strong&gt;. Remember to keep them secret and safe!&lt;/p&gt;

&lt;p&gt;Wow! you&amp;rsquo;re now a member of the developer program. The next thing we will do is installing the R packages we are going to use to work with gitHub from &lt;a href=&#34;https://elbauldelprogramador.com/en/tags/r/&#34; title=&#34;R&#34;&gt;R&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;!--ad--&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-2-packages-installation&#34;&gt;1.2 Packages installation&lt;/h2&gt;

&lt;p&gt;We will use the version 3 of GitHub API to access data &lt;a href=&#34;https://developer.github.com/v3/&#34; title=&#34;github v3 API&#34;&gt;github v3 API&lt;/a&gt;. As all the data from the API will be received in JSON format, we are going to use the function &lt;code&gt;fromJSON&lt;/code&gt; which will let us use the API url directly, and will parse the JSON data returned to a data frame format. That function is on package &lt;code&gt;jsonlite&lt;/code&gt;, so we must install it if you don&amp;rsquo;t have it installed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;install.packages&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;jsonlite&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you have not installed &lt;code&gt;stringr&lt;/code&gt; package, install it as we just do with &lt;code&gt;jsonlite&lt;/code&gt;. We are using it to make some common operations on strings. Install &lt;code&gt;ggplot2&lt;/code&gt; if you have not, too. We must use it to make the graphics, and install &lt;code&gt;httpuv&lt;/code&gt;, a package to work with HTTP.&lt;/p&gt;

&lt;p&gt;For connecting to the GitHub app, we will need to install &lt;code&gt;rgithub&lt;/code&gt; package. We do it directly from github source code. Note that it have a dependency on package &lt;code&gt;devtools&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;kn&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;devtools&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
install_github&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cscheid/rgithub&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After installing, load the packages:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# load libraries&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;github&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;jsonlite&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;stringr&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;ggplot2&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;1-3-authenticate-the-access&#34;&gt;1.3 Authenticate the access&lt;/h2&gt;

&lt;p&gt;We will need to authenticate the access, and we will do it through the function &lt;code&gt;interactive.login&lt;/code&gt; from the &lt;code&gt;rgithub&lt;/code&gt; package, passing to it our &lt;strong&gt;ID&lt;/strong&gt; and &lt;strong&gt;secret&lt;/strong&gt;. My recommendation to you is to put that lines in a separate file and not share it with anyone or anywhere.
Then just source the file when you need to authenticate, or just execute its lines.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# github app autentication&lt;/span&gt;
clientID&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;your_client_id_goes_here&amp;#34;&lt;/span&gt;
clientSecret&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;your_secret_goes_here&amp;#34;&lt;/span&gt;
context&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;interactive.login&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;clientID&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;clientSecret&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;2-get-your-friends-info&#34;&gt;2. Get your friends info&lt;/h1&gt;

&lt;p&gt;Now you&amp;rsquo;re authenticated, lets get your followers on GitHub. The function &lt;code&gt;get.my.followers&lt;/code&gt; will give us the people following us and some info about them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# get your followers&lt;/span&gt;
myFollowers&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;get.my.followers&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;context&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;we can easily check how many people is following us using &lt;code&gt;length&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# get number of my followers&lt;/span&gt;
numFollowing&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;myFollowers&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;content&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we have our followers, lets create a dataframe to store all the info returned. First, we extract each content line in &lt;em&gt;myFollowers&lt;/em&gt; list, and append them in a &lt;em&gt;dataset&lt;/em&gt; variable using &lt;code&gt;rbind&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# create a dataset with your followers&lt;/span&gt;
dataset&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;unlist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;myFollowers&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;content&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]])&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;i &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;myFollowers&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;content&lt;span class=&#34;p&#34;&gt;)){&lt;/span&gt;
  dataset&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;rbind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;dataset&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;unlist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;myFollowers&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;content&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;i&lt;span class=&#34;p&#34;&gt;]]))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we make it a data frame, name the columns as they were originally named in &lt;em&gt;myFollowers$content&lt;/em&gt; list and save it as a csv for later use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# create a data frame and save it for later use&lt;/span&gt;
dataset&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;unname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;dataset&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
dataset&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;as.data.frame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;dataset&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kp&#34;&gt;colnames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;dataset&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;myFollowers&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;content&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]))&lt;/span&gt;
write.csv&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;dataset&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;file&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;CrisFollowers.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Obviously you can save it with whatever name you like. But don&amp;rsquo;t forget the extension.&lt;/p&gt;

&lt;h1 id=&#34;3-get-our-friends-repositories-information-and-create-a-new-dataset&#34;&gt;3. Get our friends&amp;rsquo; repositories information and create a new dataset&lt;/h1&gt;

&lt;p&gt;As you sure have seen, in the last information we extracted, there&amp;rsquo;s info about our followers name, id, avatar, type, and some url of interest. However, that info doesn&amp;rsquo;t includes our friends repositories info as repo name, repo language, repo lines of code&amp;hellip;&lt;/p&gt;

&lt;p&gt;That info is fundamental to make our analysis, so we must get it. If you have took a look to the latest extracted data, you must have realized that there&amp;rsquo;s a column named &lt;strong&gt;repos_url&lt;/strong&gt; which tells us that the url to get the repos from a user is &lt;strong&gt;&lt;a href=&#34;https://api.github.com/users/user/repos&#34;&gt;https://api.github.com/users/user/repos&lt;/a&gt;&lt;/strong&gt; . For example, to get my repos information we should call &lt;strong&gt;&lt;a href=&#34;https://api.github.com/users/CritinaHG/repos&#34;&gt;https://api.github.com/users/CritinaHG/repos&lt;/a&gt;&lt;/strong&gt; , and we will get the data in JSON format from the API.&lt;/p&gt;

&lt;p&gt;So we are getting that data for each of our followers, by reading the already created dataset and getting our followers names, composing their repo url and parsing the returned data from the API using the &lt;code&gt;fromJSON&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# read latest created csv&lt;/span&gt;
myFriends&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;read.csv&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;CrisFollowers.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# extract the names&lt;/span&gt;
&lt;span class=&#34;kp&#34;&gt;unname&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;as.character&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;myFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;login&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# extract data from friends&amp;#39; public repositories&lt;/span&gt;
compdata&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;NULL&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;i &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;nrow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;myFriends&lt;span class=&#34;p&#34;&gt;)){&lt;/span&gt;
  data&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;fromJSON&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;paste0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://api.github.com/users/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;str_trim&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;unname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;side &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;both&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/repos?clientID&amp;amp;clientSecret&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
    data&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;data&lt;span class=&#34;p&#34;&gt;[,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;-4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    compdata&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;rbind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;compdata&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;data&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# write data for reuse&lt;/span&gt;
write.csv&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;compdata&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;UsersWithRepoInfo.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In &lt;strong&gt;clientID&lt;/strong&gt; and &lt;strong&gt;clientSecret&lt;/strong&gt; you should put your ID and secret generated at the begining of the post. It is not necesary but this will let us avoid request limitations. We remove the 4º column because it has redundant data. Whith &lt;code&gt;rbind&lt;/code&gt; function we are appending the new data obtained to the existing one.&lt;/p&gt;

&lt;h1 id=&#34;4-lets-do-some-data-processing&#34;&gt;4. Lets do some data processing&lt;/h1&gt;

&lt;p&gt;Lets read (if you have not read it yet) the dataset : &lt;code&gt;activeFriends&amp;lt;-read.csv(&amp;quot;UsersWithRepoInfo.csv&amp;quot;)&lt;/code&gt; We are going to perform some transformations over it to make data more readable for the analysis in R.&lt;/p&gt;

&lt;p&gt;First, as the data timezone is UTC+2 (also Madrid timezone) we need to set the timezone parameter. Let&amp;rsquo;s build a function to do that and apply it to every date column:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# make date format supported by R&lt;/span&gt;
date.format&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;datestring&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
  &lt;span class=&#34;kp&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;as.POSIXct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;datestring&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;format&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%Y-%m-%d %H:%M:%S&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;tz&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Europe/Madrid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; usetz&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# update dates with new format&lt;/span&gt;
activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;created_at&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;date.format&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;created_at&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;updated_at&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;date.format&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;updated_at&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;pushed_at&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;date.format&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;pushed_at&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Feel free to explore the dataset. You will have noticed that there&amp;rsquo;re some very interesting columns for our analysis, and others that are not so. Next we are doing is selecting the most interesting columns for our analysis:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# selecting just the interesting cols&lt;/span&gt;
activeFriends&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;activeFriends&lt;span class=&#34;p&#34;&gt;[,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;full_name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;private&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;fork&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;created_at&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;updated_at&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;pushed_at&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;homepage&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;stargazers_count&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;watchers_count&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;language&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;                             &lt;span class=&#34;s&#34;&gt;&amp;#34;has_issues&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;has_downloads&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;forks_count&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;open_issues_count&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;forks&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;open_issues&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;watchers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now binarize the columns which have True and False values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;private&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;as.integer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;private&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;has_issues&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;as.integer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;has_issues&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;fork&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;as.integer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;fork&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;has_downloads&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;as.integer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;has_downloads&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, in the &lt;code&gt;full_name&lt;/code&gt; column we must just get the user name, because the repos names are already included in &lt;code&gt;name&lt;/code&gt; column. It can be achieved by spliting each item by the slash, and getting the first:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Getting the username&lt;/span&gt;
activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;full_name&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;unlist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;lapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;strsplit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;as.character&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;full_name&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;split &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;fixed &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save it if you want, for later reuse.&lt;/p&gt;

&lt;h1 id=&#34;5-analizing-programming-language-popularity&#34;&gt;5. Analizing programming language popularity&lt;/h1&gt;

&lt;p&gt;We can get a first understanding of the data distribution like the mean, median, max or min of each column using &lt;code&gt;summary&lt;/code&gt; over our dataset. That is just an example of the output for my community, showing the metrics for the first columns:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;kp&#34;&gt;summary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;activeFriends&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
       id                 name      full_name            private                                                                      description
Min.   &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2054512&lt;/span&gt;   IV      &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;   Length&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;524&lt;/span&gt;         Min.   &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;   Asignatura de infraestructuras virtuales para el Grado de Informática     &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;st Qu.&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;32878832&lt;/span&gt;   blog    &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;   Class &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;character&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;st Qu.&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;   Repositorio para la asignatura Infraestructura Virtual de &lt;span class=&#34;m&#34;&gt;2016-2017&lt;/span&gt;       &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
Median &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;51252063&lt;/span&gt;   DAI     &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;   Mode  &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;character&lt;/span&gt;   Median &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;   An example repo &lt;span class=&#34;kr&#34;&gt;in&lt;/span&gt; Ruby &lt;span class=&#34;kr&#34;&gt;for&lt;/span&gt; continuous integration with Travis CI         &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
Mean   &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;51191269&lt;/span&gt;   IV16&lt;span class=&#34;m&#34;&gt;-17&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;                      Mean   &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;   Curso de LaTeX organizado por AMAT para alumnos de Trabajo de Fin de Grado&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;rd Qu.&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;70082791&lt;/span&gt;   swap1415&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;                      &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;rd Qu.&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;   Diferentes scripts para representación de carreras en cifras              &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
Max.   &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;88848228&lt;/span&gt;   TFG     &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;                      Max.   &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;Other&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                                                                   &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;404&lt;/span&gt;
                   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;Other&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;505&lt;/span&gt;                                  &lt;span class=&#34;kc&#34;&gt;NA&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;s                                                                      :107&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now lets dive into what concern us: see what programming languages are being used in our friends&amp;rsquo; community, and how much they&amp;rsquo;re used. For that purpose we can start creating a contingency table to give ourselves a quick look at our answer:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;languagesAndUse&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;language&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
languagesAndUse

         Arduino                C               C&lt;span class=&#34;c1&#34;&gt;#              C++            CLIPS              CSS             Dart&lt;/span&gt;
               &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;               &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;               &lt;span class=&#34;m&#34;&gt;55&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;               &lt;span class=&#34;m&#34;&gt;19&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
      Emacs Lisp              GAP         GDScript               Go           Groovy          Haskell             HTML
               &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;               &lt;span class=&#34;m&#34;&gt;48&lt;/span&gt;
            Java       JavaScript Jupyter Notebook              Lex              Lua         Makefile      Mathematica
              &lt;span class=&#34;m&#34;&gt;60&lt;/span&gt;               &lt;span class=&#34;m&#34;&gt;67&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
             PHP       PostScript           Prolog           Python                R             Ruby            Scala
               &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;               &lt;span class=&#34;m&#34;&gt;56&lt;/span&gt;               &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;               &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
           Shell              TeX       TypeScript
               &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;               &lt;span class=&#34;m&#34;&gt;38&lt;/span&gt;                &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With &lt;code&gt;nrow(languagesAndUse)&lt;/code&gt; we can get the number of different languages our friends are using. For mine it is 31.
We can also see that there are many repos with &lt;em&gt;JavaScript&lt;/em&gt; code between my 30 friends, however &lt;em&gt;Scala&lt;/em&gt;, &lt;em&gt;Lua&lt;/em&gt;, &lt;em&gt;Arduino&lt;/em&gt;, &lt;em&gt;TypeScript&lt;/em&gt;, &lt;em&gt;Groovy&lt;/em&gt;, &lt;em&gt;Lex&lt;/em&gt;, &lt;em&gt;Prolog&lt;/em&gt;, &lt;em&gt;GDScript&lt;/em&gt;&amp;hellip; each one of these seems to have been used just for one person in my community.&lt;/p&gt;

&lt;p&gt;Finally, we use &lt;code&gt;qplot&lt;/code&gt; from &lt;code&gt;ggplot2&lt;/code&gt; package to plot an hibstogram representation of the usage of langugages in our github community:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;languages&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;na.omit&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;activeFriends&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;language&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
langUssage&lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;qplot&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;languages&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;geom &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;xlab &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Language&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; ylab&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Usage&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;fill&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kp&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cornflowerblue&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
langUssage&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;theme&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;axis.text.x &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; element_text&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;angle &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;hjust &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;ggtitle&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Programming languages used by my friends&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;theme&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;plot.title &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; element_text&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;hjust &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where we use &lt;code&gt;na.omit&lt;/code&gt; to omit from data representation those languages which are NA (cannot have been extracted). The resulting hibstogram is the following:&lt;/p&gt;

&lt;figure&gt;
    &lt;img sizes=&#34;(min-width: 603px) 603px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/FriendsLanguagesUsage.png&#34; title=&#34;Programming languages used in my github community&#34; alt=&#34;Programming languages used in my github community&#34; width=&#34;603&#34; height=&#34;380&#34;&gt;&lt;/img&gt;
    &lt;figcaption&gt;Languages use in my github community &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;So, as we can see, in the representation, &lt;em&gt;JavaScript&lt;/em&gt; is the language most used with 67 repos containing &lt;em&gt;JavaScript&lt;/em&gt; code. Then &lt;a href=&#34;https://elbauldelprogramador.com/en/tags/java&#34;&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt;, &lt;em&gt;C++&lt;/em&gt; and &lt;a href=&#34;https://elbauldelprogramador.com/en/tags/python&#34;&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; are also very popular in my community.&lt;/p&gt;

&lt;p&gt;We find that &lt;em&gt;Tex&lt;/em&gt; code is in 38 repositories, so &lt;a href=&#34;https://elbauldelprogramador.com/en/tags/latex&#34;&gt;&lt;em&gt;LaTeX&lt;/em&gt;&lt;/a&gt; is also very present in my friends&amp;rsquo; community. They&amp;rsquo;re also many repos with &lt;em&gt;HTML&lt;/em&gt;, and much more less with &lt;em&gt;CSS&lt;/em&gt;, &lt;em&gt;Ruby&lt;/em&gt;, &lt;em&gt;R&lt;/em&gt; and &lt;em&gt;C&lt;/em&gt; code. Then come some languages not loved that much by the people such as &lt;em&gt;PHP&lt;/em&gt;, &lt;em&gt;C#&lt;/em&gt; or &lt;em&gt;CLIPS&lt;/em&gt; that are contained in less than 10 repositories.&lt;/p&gt;

&lt;p&gt;Finally, we can see that there&amp;rsquo;re less than 5 repos with &lt;em&gt;Dart&lt;/em&gt;, &lt;em&gt;Go&lt;/em&gt;,&lt;em&gt;Haskell&lt;/em&gt;, &lt;em&gt;Jupyter&lt;/em&gt;, &lt;em&gt;PostScript&lt;/em&gt; and &lt;em&gt;Mathematica&lt;/em&gt; code, and just one using &lt;a href=&#34;https://elbauldelprogramador.com/en/tags/scala&#34;&gt;&lt;em&gt;Scala&lt;/em&gt;&lt;/a&gt;, &lt;em&gt;Groovy&lt;/em&gt;, &lt;em&gt;Lua&lt;/em&gt; or &lt;em&gt;TypeScript&lt;/em&gt;. So that answers my own question: as my favorite programming language is Scala, I wanted to know if my friends use it too.&lt;/p&gt;

&lt;p&gt;So What happens in your friends community?
Are the languages used similarly than in my friends&amp;rsquo; community? Is JavaScript also the top used language?&lt;/p&gt;

&lt;h1 id=&#34;references&#34;&gt;References:&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://amzn.to/2ozoB3R&#34; target=&#34;_blank&#34;&gt;Mastering Social Media Mining with R&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
        <item>
            <title>How to Compile  OpenCV 3.0&#43; nonfree part from source</title>
            <link>https://elbauldelprogramador.com/en/how-to-compile-opencv3-nonfree-part-from-source/</link>
            <pubDate>Tue, 07 Mar 2017 20:31:54 +0100</pubDate>
            
            <guid>https://elbauldelprogramador.com/en/how-to-compile-opencv3-nonfree-part-from-source/</guid>
            <description>&lt;p&gt;In my last post &lt;a href=&#34;https://elbauldelprogramador.com/en/compile-opencv-3.2-with-java-intellij-idea/&#34; title=&#34;Compile OpenCV 3.2 with Java and use it in IntelliJ IDEA&#34;&gt;Compile OpenCV from source with JAVA support&lt;/a&gt; I explained how to Compile OpenCV from source with JAVA support, however, the OpenCV nonfree part was not included. If you are planning to use private features from OpenCV like SIFT or SURF descriptors, you should go as follows:&lt;/p&gt;

&lt;h1 id=&#34;1-download-opencv-3-2-unpack-and-create-build-directory&#34;&gt;[1]. Download OpenCV 3.2, unpack and create build directory&lt;/h1&gt;

&lt;p&gt;following the steps of &lt;a href=&#34;https://elbauldelprogramador.com/en/compile-opencv-3.2-with-java-intellij-idea/&#34; title=&#34;Compile OpenCV 3.2 with Java and use it in IntelliJ IDEA&#34;&gt;my last post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;!--ad--&gt;&lt;/p&gt;

&lt;h1 id=&#34;2-download-and-unpack-nonfree-part&#34;&gt;[2]. Download and unpack nonfree part&lt;/h1&gt;

&lt;p&gt;nonfree part has been separated in OpenCV3+, so you need to download it separately from &lt;a href=&#34;https://github.com/opencv/opencv_contrib&#34; title=&#34;github opencv repository&#34;&gt;github opencv repo&lt;/a&gt;  or clone the repository. Then extract &lt;strong&gt;opencv_contrib&lt;/strong&gt; and move it inside your opencv folder :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cris@cris ~ $ cp Downloads/opencv-contrib opencv-3.2.0/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;3-generate-makefiles&#34;&gt;[3]. generate makefiles&lt;/h1&gt;

&lt;p&gt;we move to the build folder inside opencv folder and type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cris@cris~$ cmake -DBUILD_SHARED_LIBS&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;OFF -DCMAKE_BUILD_TYPE&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Release&lt;span class=&#34;se&#34;&gt;\\&lt;/span&gt;
-DCMAKE_INSTALL_PREFIX&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;../dist -DOPENCV_EXTRA_MODULES_PATH&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;../opencv_contrib/modules ..&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With &lt;code&gt;DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules&lt;/code&gt; we are specifying where to found the nonfree part.&lt;/p&gt;

&lt;p&gt;If makefiles generation went ok, you can now build. If using openCV in JAVA, you must make sure &lt;code&gt;$JAVA_HOME&lt;/code&gt; variable is set to JDK&amp;rsquo;s path and visible to child processes. For that when doing: &lt;code&gt;echo $JAVA_HOME&lt;/code&gt; the JDK path must be displayed. If not, in terminal, set de variable value to JDK path and export it, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cris@cris ~$ &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/home/jdk1.8.0_111/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that when generating the makefile, the output in the Java field looks like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img sizes=&#34;(min-width: 983px) 983px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/output-build-makefiles-opencv-java.png&#34; title=&#34;Building makefiles for JAVA openCV&#34; alt=&#34;Building makefiles for JAVA openCV output&#34; width=&#34;983&#34; height=&#34;164&#34;&gt;&lt;/img&gt;
    &lt;figcaption&gt;building makefiles&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;That is, there is a specified ant and JNI path, and Java wrappers is set to YES.&lt;/p&gt;

&lt;h1 id=&#34;4-build&#34;&gt;[4]. Build&lt;/h1&gt;

&lt;p&gt;run &lt;em&gt;make&lt;/em&gt; to build openCV with Java and create a jar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cris@cris ~/opencv-3.2.0/build $ make -j8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-j8 is because JDK8. You should put here your JAVA version.&lt;/p&gt;

&lt;p&gt;Make sure the files &lt;strong&gt;opencv-320.jar&lt;/strong&gt; and &lt;strong&gt;libopencv_java320.so&lt;/strong&gt; (.so or .dll) are created inside /build.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cris@cris ~/opencv-3.2.0/build $ ls -R &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep opencv-320.jar
opencv-320.jar
opencv-320.jar.dephelper

cris@cris ~/opencv-3.2.0/build $ ls -R &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep libopencv_java320.so
libopencv_java320.so&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;5-edit-features2d-manual-hpp-file&#34;&gt;[5]. Edit features2d_manual.hpp file&lt;/h1&gt;

&lt;p&gt;Ok, if building was successfull, then move to &lt;code&gt;/modules/features2d/misc/java/src/cpp&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cris@cris ~/opencv-3.2.02 $ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; modules/features2d/misc/java/src/cpp/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and edit  features2d_manual.hpp with your favorite text editor, as following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In line 8, under &lt;code&gt;#include &amp;quot;features2d_converters.hpp&amp;quot;&lt;/code&gt;
add &lt;code&gt;#include &amp;quot;opencv2/xfeatures2d.hpp&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In line 121, in &lt;strong&gt;create&lt;/strong&gt; method,  inside &lt;code&gt;case SITF&lt;/code&gt; and  &lt;code&gt;case SURF&lt;/code&gt; replace :&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;//name = name + &amp;quot;SIFT&amp;quot;;&lt;/code&gt; by &lt;code&gt;fd=xfeatures2d::SIFT::create();&lt;/code&gt;
and &lt;code&gt;//name = name + &amp;quot;SURF&amp;quot;;&lt;/code&gt; by &lt;code&gt;fd=xfeatures2d::SURF::create();&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;do the same in line 242 for SIFT and SURF extractors:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;SIFT:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;de&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;xfeatures2d:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;SIFT:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;SURF:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;de&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;xfeatures2d:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;SURF:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;5-rebuild-to-apply-changes&#34;&gt;[5].Rebuild to apply changes&lt;/h1&gt;

&lt;p&gt;move to your opencv/build folder and run &lt;code&gt;make install&lt;/code&gt;
when finished, you just need to include the &lt;strong&gt;.so&lt;/strong&gt; and &lt;strong&gt;.jar&lt;/strong&gt; files on your openCV project and you would be able to use SIFT and SURF decriptors in your code.&lt;/p&gt;

&lt;h1 id=&#34;references&#34;&gt;References:&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/a/35266046/5032130&#34; target=&#34;_blank&#34;&gt;SURF and SIFT algorithms doesn&amp;rsquo;t work in OpenCV 3.0 Java | Stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
        <item>
            <title>Compile OpenCV 3.2 with Java and use it in IntelliJ IDEA</title>
            <link>https://elbauldelprogramador.com/en/compile-opencv-3.2-with-java-intellij-idea/</link>
            <pubDate>Wed, 25 Jan 2017 00:00:00 +0000</pubDate>
            
            <guid>https://elbauldelprogramador.com/en/compile-opencv-3.2-with-java-intellij-idea/</guid>
            <description>&lt;p&gt;If you are wishing to compile OpenCV 3.2 by your own with Java support, possibly this will help. Also it is for you if, done that, you want to use it in IntelliJ IDEA. Let&amp;rsquo;s start!&lt;/p&gt;

&lt;p&gt;For compiling OPENCV 3.2 with Java support you must make sure you have the following installed:&lt;/p&gt;

&lt;h1 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Java JDK 7+: we need JDK to build Java binding, so if not  installed download and install from &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/index.html&#34; title=&#34;www.oracle.com&#34;&gt;oracle web page&lt;/a&gt; . You can check your JDK  version by running: &lt;code&gt;java -version&lt;/code&gt;  on command line.&lt;/li&gt;
&lt;li&gt;Apache Ant: run &lt;code&gt;ant -version&lt;/code&gt; to check if Apache Ant is installed. If not, install by typing &lt;code&gt;sudo apt-get install ant&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Python 2.6+: run &lt;code&gt;python --version&lt;/code&gt; on command line to check if python is installed and its version.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;!--ad--&gt;&lt;/p&gt;

&lt;h1 id=&#34;1-download-opencv-3-2&#34;&gt;1. Download OpenCV 3.2&lt;/h1&gt;

&lt;p&gt;Go to &lt;a href=&#34;http://opencv.org/&#34; title=&#34;opencv.org&#34;&gt;opencv documentation&lt;/a&gt; and download the last stable version for Linux/Mac.&lt;/p&gt;

&lt;h1 id=&#34;2-unzip-where-you-want-to-install-and-create-build-directory&#34;&gt;2. Unzip where you want to install and create build directory&lt;/h1&gt;

&lt;p&gt;Extract the content folder &lt;strong&gt;opencv-3.2.0&lt;/strong&gt; where you want it to be placed. Then, move to that directory and create a &lt;strong&gt;build&lt;/strong&gt; empty folder, where compilation result will be stored:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    cris@cris ~ $ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; opencv-3.2.0/
    cris@cris ~ $ mkdir build&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;3-export-java-home-variable-and-generate-a-makefile&#34;&gt;3. Export JAVA_HOME variable and generate a makefile&lt;/h1&gt;

&lt;p&gt;You must make sure $JAVA_HOME variable is set to JDK&amp;rsquo;s path and visible to child processes.  For that when doing: &lt;code&gt;echo $JAVA_HOME&lt;/code&gt; the JDK path must be displayed. If not, in terminal, set de variable value to JDK path and export it, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cris@cris ~$ &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/home/jdk1.8.0_111/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;then move to &lt;strong&gt;build&lt;/strong&gt; directory and generate makefile:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cris@cris ~/opencv-3.2.0/build $ cmake -DBUILD_SHARED_LIBS&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;OFF ..&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that when generating the makefile, the output in the Java field looks like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img sizes=&#34;(min-width: 983px) 983px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/output-build-makefiles-opencv-java.png&#34; width=&#34;983px&#34; height=&#34;164px&#34;&gt;&lt;/img&gt;
    &lt;figcaption&gt;building makefiles&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;That is, there is a specified ant and JNI path, and Java wrappers is set to YES.&lt;/p&gt;

&lt;h1 id=&#34;4-build&#34;&gt;4. Build&lt;/h1&gt;

&lt;p&gt;run make to build openCV with Java and create a jar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cris@cris ~/opencv-3.2.0/build $ make -j8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;when finished, make sure the files &lt;strong&gt;opencv-320.jar&lt;/strong&gt; and &lt;strong&gt;libopencv_java320.so&lt;/strong&gt; (.so or .dll) are created:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;    cris@cris ~/opencv-3.2.0/build $ find . -name opencv-320.jar*
    opencv-320.jar
    opencv-320.jar.dephelper

    cris@cris ~/opencv-3.2.0/build $ find . -name libopencv_java320.so
    libopencv_java320.so&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that it is build, the next step would be create an example in Java to check if it works. I am using IntelliJ IDEA Ultimate 2016 IDE, so in next section I am going to explain how to create a Java OpenCV proyect in INTELLIJ.&lt;/p&gt;

&lt;h1 id=&#34;creating-a-java-opencv-proyect-in-intellij-16&#34;&gt;Creating a Java OpenCV proyect in INTELLIJ 16&lt;/h1&gt;

&lt;p&gt;The easiest way to create a Java and Scala openCV proyect is using SBT.
  So we open IntelliJ and create a new SBT proyect. Once it is created, we select &lt;code&gt;File-&amp;gt;Project Structure&lt;/code&gt;  (Make sure here Module JDK appears set with our SDK)
 and choose &lt;strong&gt;Dependencies&lt;/strong&gt; tab. Here, we click to add and select the &lt;strong&gt;opencv-320.jar&lt;/strong&gt; and  the library, that is in &lt;strong&gt;opencv3.2.0/build/lib&lt;/strong&gt; :&lt;/p&gt;

&lt;figure&gt;
    &lt;img sizes=&#34;(min-width: 1022px) 1022px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/adding-Opencv-jar-to-IntelliJ-project.png&#34; title=&#34;&#34; alt=&#34;&#34; width=&#34;1022&#34; height=&#34;341&#34;&gt;&lt;/img&gt;
    &lt;figcaption&gt;adding .jar file&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
    &lt;img sizes=&#34;(min-width: 734px) 734px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/adding-libpath-to-intelliJ-project.png&#34; title=&#34;&#34; alt=&#34;&#34; width=&#34;734&#34; height=&#34;291&#34;&gt;&lt;/img&gt;
    &lt;figcaption&gt;adding .so file&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;finally, we take the face detection example from &lt;a href=&#34;http://docs.opencv.org/2.4.4-beta/doc/tutorials/introduction/desktop_java/java_dev_intro.html&#34; title=&#34;docs.opencv.org&#34;&gt;opencv documentation&lt;/a&gt; , correct it (because it is for OpenCV version 2.4.4)  and store it in a file called &lt;strong&gt;helloOpenCV.java&lt;/strong&gt; inside &lt;code&gt;src-&amp;gt;main-&amp;gt;java&lt;/code&gt; folder.  The example code adapted to OpenCV version 3.2 is :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;    &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.opencv.core.*&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.opencv.core.Mat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.opencv.core.MatOfRect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.opencv.core.Point&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.opencv.core.Rect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.opencv.core.Scalar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.opencv.imgcodecs.Imgcodecs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.opencv.objdetect.CascadeClassifier&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kn&#34;&gt;import static&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.opencv.imgproc.Imgproc.rectangle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// Detects faces in an image, draws boxes around them, and writes the results
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// to &amp;#34;faceDetection.png&amp;#34;.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DetectFaceDemo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;\nRunning DetectFaceDemo&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// Create a face detector from the cascade file in the resources
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// directory.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;CascadeClassifier&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;faceDetector&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CascadeClassifier&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getResource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/lbpcascade_frontalface.xml&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getPath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Mat&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Imgcodecs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;imread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getResource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/lena.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getPath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// Detect faces in the image.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// MatOfRect is a special container class for Rect.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;MatOfRect&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;faceDetections&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MatOfRect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;faceDetector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;detectMultiScale&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;faceDetections&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Detected %s faces&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;faceDetections&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toArray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// Draw a bounding box around each face.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Rect&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rect&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;faceDetections&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toArray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;rectangle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Point&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Point&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scalar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// Save the visualized detection.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;faceDetection.png&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Writing %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Imgcodecs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;imwrite&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;HelloOpenCV&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello, OpenCV&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// Load the native library.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;loadLibrary&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Core&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;NATIVE_LIBRARY_NAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DetectFaceDemo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
     &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally we run &lt;strong&gt;HelloOpenCV&lt;/strong&gt; example and see it works! printing lenna&amp;rsquo;s face detection to &lt;strong&gt;faceDetection.png&lt;/strong&gt; image.&lt;/p&gt;

&lt;figure&gt;
    &lt;img sizes=&#34;(min-width: 531px) 531px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/example-face-detection-with-opencv.png&#34; title=&#34;&#34; alt=&#34;&#34; width=&#34;531&#34; height=&#34;528&#34;&gt;&lt;/img&gt;
    &lt;figcaption&gt;example face detection&lt;/figcaption&gt;
&lt;/figure&gt;</description>
        </item>
        
    </channel>
</rss>
