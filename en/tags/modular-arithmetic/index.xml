<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Modular Arithmetic on The Programmer&#39;s Chest</title>
        <link>https://elbauldelprogramador.com/en/tags/modular-arithmetic/</link>
        <description>Recent content in Modular Arithmetic on The Programmer&#39;s Chest</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>es-ES</language>
        <lastBuildDate>Mon, 04 Dec 2017 12:12:41 +0100</lastBuildDate>
        <image>
            <url>https://elbauldelprogramador.com/img/bio-photo-rss.png</url>
            <link>https://elbauldelprogramador.com/en/tags/modular-arithmetic/</link>
            <title>Modular Arithmetic on The Programmer&#39;s Chest</title>
            <width>144</width>
            <height>144</height>
        </image>
        <atom:link href="https://elbauldelprogramador.com/en/tags/modular-arithmetic/" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Cryptography 101 - Mathematical Basis (II) - Modular exponentiation</title>
            <link>https://elbauldelprogramador.com/en/cryptography-101-modular-exponentiation/</link>
            <pubDate>Mon, 04 Dec 2017 12:12:41 +0100</pubDate>
            
            <guid>https://elbauldelprogramador.com/en/cryptography-101-modular-exponentiation/</guid>
            <description>
&lt;blockquote&gt;
&lt;p&gt;This post is part of a series on &lt;strong&gt;Cryptography 101&lt;/strong&gt;, source code is available at &lt;a href=&#34;https://github.com/elbaulp/grado_informatica_criptografia&#34;&gt;elbaulp/cripto&lt;/a&gt;, there is also a &lt;a href=&#34;https://elbauldelprogramador.com/en/cryptography-101/&#34;&gt;Table of Contents.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h1 id=&#34;modular-exponentiation&#34;&gt;Modular Exponentiation&lt;/h1&gt;

&lt;p&gt;Given &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; now you want to compute \(a^m\bmod n\) in a efficient way, to do it, let first define &lt;a href=&#34;https://en.wikipedia.org/wiki/Fermat&#39;s_little_theorem&#34; title=&#34;Fermat-Euler Theorem&#34;&gt;Fermat-Euler Theorem&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Given \(a,n \in \mathbb N\), if \(gcd(a,n) = 1\), \(a^{\phi(n)} \equiv 1\pmod n\)
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here are some examples. In \(\mathbb Z_5,\ \phi(5) = 4\), Fermat-Euler theorem says then that \(1^{4} = 2^{4} = 3^{4} = 4^{4} = 1\). In \(\mathbb Z_{53}, \phi(53) = 52\), in order to compute \(7^{111}\), as \(gcd(7, 53) = 1\) then \( 7^{52} = 1\), so \(7^{52\cdot 2} = 7^{104} = 1\) and therefore \(7^{111} = 7^7 = 29\).&lt;/p&gt;

&lt;p&gt;A particular case of Fermat-Euler Theorem is &lt;em&gt;Fermat&#39;s Little Theorem:&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Given p prime, \(a \in \mathbb N:\ 1 \leq a \leq p-1\) then \(a^{p-1} \equiv 1\pmod p\)
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As consequence, now you have \(a^{p} \equiv a\pmod p\). Let see it with more examples:&lt;/p&gt;

&lt;p&gt;\(\mathbb Z_4\) units are \(\mathcal U(\mathbb Z_4) = \{1,3\}\), it has only two units because \(\phi(4) = \phi(2^2) = 2\), particularly those units are 1 and 3, because they satisfy \(1^2 = 3^2 = 1\). Above you saw that in \(\mathbb Z_5,\ \phi(5) = 4\), and therefore all its elements &lt;a href=&#34;https://elbauldelprogramador.com/en/cryptography-101-math-basis-i/#computing-modular-inverses&#34; title=&#34;have inverse&#34;&gt;have inverse&lt;/a&gt;. Lets check one of Fermat&#39;s Little theorem variants also holds in \(\mathbb Z_5\). The theorem states \(a^{p} \equiv a\pmod p\), and as you can see, in \(Z_5, 0^5 = 0, 1^5 = 1, 2^5 = 2, 3^5 = 3, 4^5 = 4\).&lt;/p&gt;

&lt;h2 id=&#34;an-algorithm-to-compute-modular-exponentiation&#34;&gt;An algorithm to compute modular exponentiation&lt;/h2&gt;

&lt;p&gt;There is more than one algorithm to compute modular exponentiation, here is one:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Input: \(a\in\mathbb Z_n\), an integer \(0 \leq k \lt n\) which binary representation is \(\sum_{i=0}^t k_i 2^i\).&lt;/li&gt;
&lt;li&gt;Output: \(a^k \pmod n\)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;
  1. Set b = 1, If k = 0 return b.
  2. A = a
  3. If k_0 = 1 then b = a
  4. For each i from 1 to t:
     1. A = A * A modulo n.
     2. If k_i = 1 then b = A * b modulo n
  5. return b
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This algorithm is based in the fact that the exponent can be represented in binary. The binary representation of k is given by \(\sum_{i=0}^t k_i 2^i\), in which each \(k_i\in \{0, 1\}\). It is possible this representation does not sound familiar to you, but is nothing more that an abbreviated form of the more common one, for example, lets represent 5 in binary, which is \(1\cdot 2^0 + 0\cdot 2^1 + 1\cdot 2^2\). Knowing this, then:&lt;/p&gt;

&lt;p&gt;$$a^k = \prod_{i=0}^t a^{k_i 2^i} = (a^{2^0})^{k_0}(a^{2^1})^{k_1}\cdots(a^{2^t})^{k_t}$$&lt;/p&gt;

&lt;p&gt;If you analyze the expression above, when \(k_i = 0\), the term \((a^{2^i})^{k_i} = 1\), which implies this term is not going to change the final result, because is multiplying by 1.&lt;/p&gt;

&lt;p&gt;Now reading the algorithm becomes easier. It takes an integer and other two numbers, k,n &gt; 0 and computes \(a^{k} \pmod n\). If k==0 is not necessary compute anything and it returns 1, because any number to the power of 0 is 1. In step 3, if \(k_0\) (the least significant bit) is 1, therefore \((a^{2^0})^{k_0} = a\), conversely b = 1 as you are raising to 0, and any number to the power of 0 is 1. Next step iterates over the remaining bits of k, that is \(k_1 \dots k_t\). Basically this loop do the same process described above. Compute A squared (corresponding to this part of the expression \((a^2\)), if the bit \(k_i = 1\) multiply \((a^{2^i})^{1}\) by &lt;code&gt;b&lt;/code&gt;, if \(k_i = 0\) nothing is done, because the whole expression \((a^{2^i})^{0} = 1\). When the loops ends, b is returned.&lt;/p&gt;

&lt;p&gt;In order to let you understand this process better, imagine you want to compute \(2^5\pmod 5\). First step is representing the exponent in binary form, \(5 = 101_b\), follow the steps, where a = 2, k = 5 and n = 5.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
b = 1
A = 2
is k_0 == 1? yes -&amp;gt; b = 2
from k_1 to k_t:
   A = A * A mod n -&amp;gt; 2 * 2 mod 5 = 4
   is k_1 == 1? no
   A = A * A mod n -&amp;gt; 4 * 4 mod 5 = 1
   is k_2 == 1? yes -&amp;gt; b = A * b mod n -&amp;gt; b = 1 * 2 mod 5 = 2
return b, which is 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&#39;ve tried to draw two graphics representations to help you visualize the process, lets say you want to compute \(2^7 \pmod 5\) and \(2^{11} \pmod 5\):&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
        &lt;a href=&#34;https://elbauldelprogramador.com/img/criptografia-101-fundamentos-matematicos-ii-powermodint.png&#34;&gt;
          &lt;img
            on=&#34;tap:lightbox1&#34;
            role=&#34;button&#34;
            tabindex=&#34;0&#34;
            layout=&#34;responsive&#34;
            src=&#34;https://elbauldelprogramador.com/img/criptografia-101-fundamentos-matematicos-ii-powermodint.png&#34;
            alt=&#34;Computing Modular Exponentiation&#34;
            title=&#34;Computing Modular Exponentiation&#34;
            sizes=&#34;(min-width: 640px) 640px, 100vw&#34;
            width=&#34;640&#34;
            height=&#34;330&#34;&gt;
          &lt;/img&gt;
        &lt;/a&gt;
        &lt;figcaption&gt;Computing modular exponentiation&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
        &lt;a href=&#34;https://elbauldelprogramador.com/img/criptografia-101-fundamentos-matematicos-ii-powermodint2.png&#34;&gt;
          &lt;img
            on=&#34;tap:lightbox1&#34;
            role=&#34;button&#34;
            tabindex=&#34;0&#34;
            layout=&#34;responsive&#34;
            src=&#34;https://elbauldelprogramador.com/img/criptografia-101-fundamentos-matematicos-ii-powermodint2.png&#34;
            alt=&#34;&#34;
            title=&#34;&#34;
            sizes=&#34;(min-width: 640px) 640px, 100vw&#34;
            width=&#34;640&#34;
            height=&#34;206&#34;&gt;
          &lt;/img&gt;
        &lt;/a&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;I hope this examples have let you understand better how the algorithm works. I&#39;ve implemented it in python, source code is available on &lt;a href=&#34;https://github.com/algui91/grado_informatica_criptografia/blob/master/P1/modularArith/ej3.py&#34; title=&#34;github&#34;&gt;github&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;powerModInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
  &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;      @input a in $Z_n$ and integers 0 &amp;lt;= k &amp;lt;= n
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;      @output a to the power of k mod n ($a^k mod n$)
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;  &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# If the least significant bit is 1, $a^1 = a$&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;order&#34;&gt;Order&lt;/h2&gt;

&lt;p&gt;The definition of a &lt;a href=&#34;https://en.wikipedia.org/wiki/Multiplicative_order&#34; title=&#34;number&#39;s order is&#34;&gt;number&#39;s order is&lt;/a&gt;
\[ord(a) = min(k\ \in \mathbb N\backslash 0\:a^k=1)\]
that is to say, the smallest number to which you have to raise &lt;code&gt;a&lt;/code&gt; to give you 1. For example, in \(\mathbb Z_5\) you have the following orders for its elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;\(1^1 = 1; ord(1) = 1\), The smallest number to which you have to raise 1 to give you 1 is 1.&lt;/li&gt;
&lt;li&gt;\(2^4 = 1; ord(2) = 4\)&lt;/li&gt;
&lt;li&gt;\(3^4 = 1; ord(3) = 4\)&lt;/li&gt;
&lt;li&gt;\(4^2 = 1; ord(4) = 2\), The smallest number to which you have to raise 4 to give you 1 is 2.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read more on Order on &lt;a href=&#34;https://en.wikipedia.org/wiki/Order_(group_theory)&#34; title=&#34;Wikipedia Order (Group Theory) page&#34;&gt;Wikipedia Order (Group Theory) page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;subgroups-and-primitives&#34;&gt;Subgroups and primitives&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;
Given an element of \(\mathbb Z_p\), for example, \(\lt a&gt; = \{ a^k:\ k\in N \}\) is a subgroup generated by a.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is called &lt;a href=&#34;https://en.wikipedia.org/wiki/Generating_set_of_a_group&#34; title=&#34;Generating a set of a group&#34;&gt;Generating a set of a group&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, the subgroups of the units of \(\mathbb Z_5\) are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;\(\lt 1&gt; = \{ 1 \}\), because \(\forall k \in\mathbb Z, 1^k = 1\)&lt;/li&gt;
&lt;li&gt;\(\lt 2&gt; = \{ 2^0 = 1, 2^1 = 2, 2^2 = 4, 2^3 = 3\} = \{ 1, 2, 3, 4 \}\)&lt;/li&gt;
&lt;li&gt;\(\lt 3&gt; = \{ 3^0, 3^1, 3^2, 3^3\} = \{ 1, 2, 3, 4 \}\)&lt;/li&gt;
&lt;li&gt;\(\lt 4&gt; = \{ 4^0, 4^1, 4^2, 4^3 \} = \{ 1, 4 \}\)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you look closely, &amp;lt;2&gt; and &amp;lt;3&gt; generate \(\mathbb Z_5\) completely, this elements are called primitives. Particuraly, &amp;lt;a&gt; will be primitive if its &lt;strong&gt;order is maximum&lt;/strong&gt;, in this case it is so, because \(\phi(5)=4, ord(2) = ord(3) = 4\), which is the maximum. Furthermore, the order of a number sets the number of elements that generate the subgroup, as ord(2) = ord(3) = 4, this means this subgroups generate 4 elements, which are the number of units of \(\mathbb Z_5\), they generate \(\mathbb Z_5\) completely.&lt;/p&gt;

&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;

&lt;p&gt;
&lt;blockquote&gt;The code shown along this series is hosted on my &lt;a href=&#34;https://github.com/elbaulp/grado_informatica_criptografia&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Cryptography course notes by Professor &lt;strong&gt;Jesús García Miranda&lt;/strong&gt;, Higher Technical School of Information Technology and Telecommunications Engineering of the University of Granada.&lt;/em&gt;&lt;/p&gt;


&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Cryptography 101: Mathematical basis (I) - Modular arithmetic</title>
            <link>https://elbauldelprogramador.com/en/cryptography-101-math-basis-i/</link>
            <pubDate>Sat, 28 Oct 2017 11:23:55 +0200</pubDate>
            
            <guid>https://elbauldelprogramador.com/en/cryptography-101-math-basis-i/</guid>
            <description>&lt;h1 id=&#34;modular-arithmetic&#34;&gt;Modular Arithmetic&lt;/h1&gt;

&lt;p&gt;Before going straight to cryptography, it is necessary to have clear a few mathematical concepts, as cryptography in based on them.&lt;/p&gt;

&lt;p&gt;First, I am going to talk about &lt;strong&gt;modular arithmetic&lt;/strong&gt;, also known as &lt;strong&gt;clock arithmetic&lt;/strong&gt;, which is defined as:&lt;/p&gt;

&lt;p&gt;\[a \equiv b\pmod n,\]&lt;/p&gt;

&lt;p&gt;if \(b - a\) is multiple of \(n\), in other words, \(a\) and \(b\) have the same remainder when divided by \(n\).&lt;/p&gt;

&lt;p&gt;For example, \(3\equiv 8\pmod 5\), because \(8 - 3 = 5\), which is a 5 multiple. Another way would be knowing that both remainders of 3 divided by 5 and 8 divided by 5 are 3. From now on, I&#39;ll write the remainder of a number like this:&lt;/p&gt;

&lt;p&gt;\[a\bmod n = r,\]&lt;/p&gt;

&lt;p&gt;where \(r\) is the remainder of \(a\) divided by \(n\).&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;
        &lt;a href=&#34;https://elbauldelprogramador.com/img/crypto-101.jpg&#34;&gt;
          &lt;img
            on=&#34;tap:lightbox1&#34;
            role=&#34;button&#34;
            tabindex=&#34;0&#34;
            layout=&#34;responsive&#34;
            src=&#34;https://elbauldelprogramador.com/img/crypto-101.jpg&#34;
            alt=&#34;Modular Arithmetics&#34;
            title=&#34;Modular Arithmetics&#34;
            sizes=&#34;(min-width: 640px) 640px, 100vw&#34;
            width=&#34;640&#34;
            height=&#34;360&#34;&gt;
          &lt;/img&gt;
        &lt;/a&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;h2 id=&#34;computing-modular-inverses&#34;&gt;Computing modular inverses&lt;/h2&gt;

&lt;p&gt;Given \(a \in \mathbb Z_n\), \(a\) has inverse (also called unit) if \(\exists b \in \mathbb Z_n\ :\ ba = 1\), and its written \(a^{-1}\).&lt;/p&gt;

&lt;p&gt;The set of all \(\mathbb Z_n\) units is called \(\mathcal{U}(\mathbb Z_n)\) and is defined as:&lt;/p&gt;

&lt;p&gt;\[\mathcal{U}(\mathbb Z_n) = \{ a \in \mathbb Z_n : \exists a^{-1}\} = \{ a \in \mathbb Z_n : gcd(a, n) = 1\},\]&lt;/p&gt;

&lt;p&gt;where &lt;strong&gt;gcd&lt;/strong&gt; is &lt;em&gt;Greatest Common Divisor&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If \(p\) &lt;strong&gt;is prime&lt;/strong&gt;, every element in \(\mathbb Z_p\) but zero has inverse, therefore, \(\mathbb Z_p\) is a &lt;strong&gt;field&lt;/strong&gt;. Cryptography works with fields \(\mathbb Z_p\) where \(p\) is prime.&lt;/p&gt;

&lt;p&gt;The number of units in \(\mathbb Z_n\) can be computed with &lt;strong&gt;Euler&#39;s function&lt;/strong&gt; \(\phi(n)\):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If \(p\) &lt;strong&gt;is prime&lt;/strong&gt; \(\phi(p) = p - 1\), because all its elements but zero are units.&lt;/li&gt;
&lt;li&gt;Given two integers a,b: \( \phi(ab) = \phi(a)\phi(b)\ \text{iff}\ gcd(a, b) = 1\).&lt;/li&gt;
&lt;li&gt;Given \(p\) prime: \(\phi(p^n) = p^n - p^{n-1}\).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;!--more--&gt;&lt;!--ad--&gt;&lt;/p&gt;

&lt;h2 id=&#34;practical-example&#34;&gt;Practical example&lt;/h2&gt;

&lt;p&gt;Lets see &lt;strong&gt;an example&lt;/strong&gt;. \(\#\mathcal{U}(\mathbb Z_5) = 4\), because all its elements have inverse (1,2,3,4), and \(\phi(5) = 4\), therefore \(\mathbb Z_5\) &lt;strong&gt;is a field&lt;/strong&gt;. However, \(\#\mathcal{U}(\mathbb Z_{15}) = 8\), because \(\phi(15) = \phi(3)\phi(5) = 2\cdot 4 = 8\). The units of \(\mathbb Z_{15}\) are 1,2,4,7,8,11,13,14.&lt;/p&gt;

&lt;p&gt;The code below uses the &lt;em&gt;Euclidean algorithm&lt;/em&gt; to compute the inverse of a number in \(\mathbb Z_n\). This &lt;a href=&#34;https://elbauldelprogramador.com/en/tags/python/&#34; title=&#34;python code&#34;&gt;python code&lt;/a&gt; is &lt;a href=&#34;https://github.com/algui91/grado_informatica_criptografia/blob/master/P1/modularArith/ej1.py&#34; title=&#34;on my github&#34;&gt;on my github&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;extGcd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
      &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;      Compute the Greatest Common Divisor d of a and b, and integers x and
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;      y satisfying ax + by = d.
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;      :returns: a tuple (d,x,y)
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;      &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;x2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;x1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;y2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;y1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x1&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y1&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;x2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x1&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;x1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;y2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y1&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;y1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;

      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This algorithm returns a tuple &lt;code&gt;(d, x, y)&lt;/code&gt;, where &lt;code&gt;d&lt;/code&gt; is &lt;code&gt;gcd(a,b)&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; is &lt;code&gt;a mod b&lt;/code&gt; inverse. For example, &lt;code&gt;gcd(2, 5)&lt;/code&gt;, will return &lt;code&gt;[1, -2, 1]&lt;/code&gt;, where 1 is &lt;code&gt;gcd(2, 5)&lt;/code&gt;, and \(-2\) its inverse, if you want a positive number, just sum 5 to \(-2\), which is 3, therefore 2 mod 5 inverse is 3, because \(2 \cdot 3 = 6\), and 6 mod 5 = 1.&lt;/p&gt;

&lt;p&gt;In order to make the task of computing a number&#39;s inverse, I&#39;ve created the method bellow, the code is also available at my &lt;a href=&#34;https://github.com/algui91/grado_informatica_criptografia/blob/master/P1/modularArith/ej2.py&#34; title=&#34;github&#34;&gt;github&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;moduloInverse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;:returns: the inverse of a modulo b, if it exists&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extGcd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; a inverse does not exist&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Execute it with the same numbers as before, 2 and 5, and it&#39;ll return \(2^{-1},\) that is, 3.&lt;/p&gt;

&lt;h1 id=&#34;aknowledgements&#34;&gt;Aknowledgements&lt;/h1&gt;

&lt;p&gt;I&#39;d like to thank &lt;a href=&#34;https://github.com/josealberto4444/&#34; title=&#34;josealberto4444&#34;&gt;josealberto4444&lt;/a&gt; for helping me with some corrections.&lt;/p&gt;

&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;


&lt;blockquote&gt;The code shown along this series is hosted on my &lt;a href=&#34;https://github.com/elbaulp/grado_informatica_criptografia&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Cryptography course notes by Professor &lt;strong&gt;Jesús García Miranda&lt;/strong&gt;, Higher Technical School of Information Technology and Telecommunications Engineering of the University of Granada.&lt;/em&gt;&lt;/p&gt;




&lt;h1 id=&#34;more-resources&#34;&gt;More resources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Modular_arithmetic&#34; title=&#34;Modular Arithmetic | wikipedia.org&#34;&gt;Modular Arithmetic | wikipedia.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
